{"ast":null,"code":"import _extends from \"C:\\\\BoxTracker-React\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Pages\\\\ScanBarcode.jsx\";\nimport TextField from '@material-ui/core/TextField';\nimport React from 'react';\nimport ReactTable from 'react-table';\nimport Header from \"./../Components/Headers/Header\";\nimport HeaderLinks from \"./../Components/Headers/HeaderLinks\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport \"react-table/react-table.css\";\nimport '../customers.css';\nimport '../Menu.css';\nimport ContinueDialogue from './ContinueDialogue';\n\nclass ScanBarcode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.params = {};\n    this.state = {\n      user: {},\n      box: [],\n      boxes: [],\n      loading: false,\n      go: false,\n      show: false,\n      isShown: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    //ReactDOM.findDOMNode(this.refs.divFocus).focus();\n    this.getBoxes();\n  }\n\n  componentDidUpdate() {\n    const _this$state = this.state,\n          go = _this$state.go,\n          box = _this$state.box,\n          show = _this$state.show,\n          isShown = _this$state.isShown;\n\n    if (go) {\n      this.goStep();\n    }\n\n    if (isShown && !show) {\n      this.setState({\n        isShown: false,\n        box: []\n      });\n    }\n  }\n\n  handleChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    this.getBox(this.state.value);\n    this.setState({\n      value: \"\",\n      go: true\n    });\n    e.preventDefault();\n  }\n\n  goStep() {\n    const _this$state2 = this.state,\n          box = _this$state2.box,\n          show = _this$state2.show,\n          isShown = _this$state2.isShown;\n    box.map((data, i) => {\n      let step = data.box_step; //if current workstation = the step the box is up to, continue\n\n      if (localStorage.getItem(\"Workstation\") == step) {\n        var path = \"/box/\" + data.box_id + \"/\" + step;\n        this.props.history.push(path);\n      } else {\n        if (!isShown) {\n          this.setState({\n            show: true,\n            isShown: true\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          show = _this$state3.show,\n          isShown = _this$state3.isShown,\n          box = _this$state3.box,\n          boxes = _this$state3.boxes,\n          boxID = _this$state3.boxID;\n    var menuStyle = {\n      margin: 'auto',\n      padding: 40,\n      // width: 700,\n      height: 400,\n      overflow: 'auto'\n    };\n    var customerStyle = {\n      margin: 'auto',\n      padding: 20,\n      overflow: 'auto'\n    };\n\n    const rest = _extends({}, this.props);\n\n    return React.createElement(\"div\", {\n      className: \"Menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, show && React.createElement(ContinueDialogue, {\n      onClick: e => {\n        this.setState({\n          show: false\n        });\n        alert(e.currentTarget.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Header, Object.assign({\n      absolute: true,\n      fixed: true,\n      color: \"dark\",\n      brand: \"Box Tracker\",\n      rightLinks: React.createElement(HeaderLinks, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"header\", {\n      className: \"Menu-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Scan Barcode\")), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: \"barcode-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Barcode\"), React.createElement(TextField, {\n      autoFocus: true,\n      value: this.state.value,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(ReactTable, {\n      getTrGroupProps: (state, rowInfo) => {\n        if (rowInfo !== undefined) {\n          return {\n            onClick: () => {\n              var path = \"/box/\" + rowInfo.row.box_id;\n              this.props.history.push(path);\n            },\n            style: {\n              cursor: 'pointer',\n              background: rowInfo.original.id === this.state.selectedIndex ? '#00afec' : 'white',\n              color: rowInfo.original.id === this.state.selectedIndex ? 'white' : 'black'\n            }\n          };\n        }\n      },\n      data: boxes,\n      columns: [{\n        Header: \"Box\",\n        columns: [{\n          Header: \"Box ID\",\n          accessor: \"box_id\"\n        }, {\n          Header: \"Job ID\",\n          accessor: \"job_id\"\n        }, {\n          Header: \"Customer\",\n          accessor: \"customer_name\"\n        }, {\n          Header: \"Location\",\n          accessor: \"box_location\"\n        }, {\n          Header: \"Operator\",\n          accessor: \"box_operator\"\n        }, {\n          Header: \"Step\",\n          accessor: \"box_step\"\n        }, {\n          Header: \"State\",\n          accessor: \"box_state\"\n        }, {\n          Header: \"Dispatch\",\n          accessor: \"job_dispatch\"\n        }]\n      }],\n      defaultPageSize: 10,\n      className: \"-striped -highlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, (state, makeTable, instance) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, makeTable());\n    }));\n  } ///\n  /// HTTP GET/POST METHODS\n  ///\n\n\n  getBox(boxID) {\n    if (boxID == \"$36\") {\n      boxID = 6;\n    } //alert(boxID)\n    //boxID = 6\n\n\n    var path = \"http://localhost:52773/BoxTracker/boxes/\" + boxID; //TEMPORARY\n    //jobID = \"1\"\n\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        //alert(JSON.stringify(response))\n        this.setState({\n          box: response\n        });\n      }\n\n      return response;\n    });\n  }\n\n  getBoxes() {\n    //alert(boxID)\n    //boxID = 6\n    var path = \"http://localhost:52773/BoxTracker/boxes\"; //TEMPORARY\n    //jobID = \"1\"\n\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        //alert(JSON.stringify(response))\n        this.setState({\n          boxes: response\n        });\n      }\n\n      return response;\n    });\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}\n\nexport default ScanBarcode;","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Pages\\ScanBarcode.jsx"],"names":["TextField","React","ReactTable","Header","HeaderLinks","Toolbar","ContinueDialogue","ScanBarcode","Component","constructor","props","params","state","user","box","boxes","loading","go","show","isShown","handleChange","bind","handleSubmit","componentDidMount","getBoxes","componentDidUpdate","goStep","setState","e","value","target","getBox","preventDefault","map","data","i","step","box_step","localStorage","getItem","path","box_id","history","push","render","boxID","menuStyle","margin","padding","height","overflow","customerStyle","rest","alert","currentTarget","id","rowInfo","undefined","onClick","row","style","cursor","background","original","selectedIndex","color","columns","accessor","makeTable","instance","requestOptions","method","headers","fetch","then","handleGetResponse","response","handleResponse","text","JSON","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import TextField from '@material-ui/core/TextField';\r\nimport React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport Header from \"./../Components/Headers/Header\";\r\nimport HeaderLinks from \"./../Components/Headers/HeaderLinks\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport \"react-table/react-table.css\";\r\nimport '../customers.css';\r\nimport '../Menu.css';\r\nimport ContinueDialogue from './ContinueDialogue';\r\n\r\n\r\n\r\nclass ScanBarcode extends React.Component{\r\n  constructor(props)\r\n  {\r\n      \r\n      super(props);\r\n      this.params = {};\r\n      this.state = {\r\n          user: {},\r\n          box: [],\r\n          boxes: [],\r\n          loading: false,\r\n          go: false,\r\n          show: false,\r\n          isShown: false\r\n      };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    \r\n  }\r\n  componentDidMount()\r\n  {\r\n    //ReactDOM.findDOMNode(this.refs.divFocus).focus();\r\n    this.getBoxes()\r\n  }\r\n\r\n  componentDidUpdate()\r\n  {\r\n    const {go, box, show, isShown} = this.state\r\n    if(go){this.goStep()}\r\n    if(isShown && !show){\r\n      this.setState({\r\n        isShown:false,\r\n        box: []\r\n      })\r\n    }\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({value: e.target.value});\r\n  }\r\n\r\n    handleSubmit(e) {\r\n      this.getBox(this.state.value)\r\n      this.setState({\r\n        value: \"\",\r\n        go: true\r\n      })\r\n      e.preventDefault();\r\n    }\r\n    \r\n  goStep()\r\n  {\r\n    const {box, show, isShown} = this.state\r\n    box.map((data, i) => {\r\n      let step = data.box_step\r\n      //if current workstation = the step the box is up to, continue\r\n      if(localStorage.getItem(\"Workstation\")==step){\r\n        var path = \"/box/\"+data.box_id+\"/\"+step\r\n        this.props.history.push(path);\r\n      }\r\n      else\r\n      {\r\n        if(!isShown){this.setState({show:true, isShown:true})}\r\n      }\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { show, isShown, box, boxes, boxID} = this.state\r\n    var menuStyle = {\r\n      margin: 'auto',\r\n      padding: 40,\r\n     // width: 700,\r\n      height: 400,\r\n      overflow: 'auto',\r\n    };\r\n    var customerStyle = {\r\n        margin: 'auto',\r\n        padding: 20,\r\n        overflow: 'auto',\r\n      };\r\n    const { ...rest } = this.props;\r\n    return (\r\n        \r\n        <div className=\"Menu\">\r\n          {show && <ContinueDialogue onClick={(e)=>{\r\n            this.setState({show:false})\r\n              alert(e.currentTarget.id)\r\n          }}/>}\r\n            <Header\r\n                absolute\r\n                fixed\r\n                color=\"dark\"\r\n                brand=\"Box Tracker\"\r\n                rightLinks={<HeaderLinks />}\r\n                {...rest}\r\n            />\r\n            <Toolbar />\r\n            <header className=\"Menu-header\">\r\n            <p>Scan Barcode</p>\r\n          </header>\r\n          <form onSubmit={this.handleSubmit}>\r\n           <br/>\r\n           <label for=\"barcode-input\">Barcode</label>\r\n            <TextField autoFocus  value={this.state.value} onChange={this.handleChange} />\r\n          </form>\r\n          <ReactTable\r\n          getTrGroupProps={(state, rowInfo) => {\r\n            if (rowInfo !== undefined) {\r\n              return {\r\n                  onClick: () => {\r\n                    var path = \"/box/\"+rowInfo.row.box_id\r\n                    this.props.history.push(path);\r\n                  },\r\n                  style: {\r\n                      cursor: 'pointer',\r\n                      background: rowInfo.original.id === this.state.selectedIndex ? '#00afec' : 'white',\r\n                      color: rowInfo.original.id === this.state.selectedIndex ? 'white' : 'black'\r\n                              }\r\n                          }\r\n                    }}\r\n                }\r\n          data={boxes}\r\n          columns={[\r\n            {\r\n              Header: \"Box\",\r\n              columns: [\r\n                {\r\n                  Header: \"Box ID\",\r\n                  accessor: \"box_id\"\r\n                },\r\n                {\r\n                  Header: \"Job ID\",\r\n                  accessor: \"job_id\"\r\n                },\r\n                {\r\n                  Header: \"Customer\",\r\n                  accessor: \"customer_name\"\r\n                },\r\n                {\r\n                  Header: \"Location\",\r\n                  accessor: \"box_location\"\r\n                },\r\n                {\r\n                  Header: \"Operator\",\r\n                  accessor: \"box_operator\"\r\n                },\r\n                {\r\n                  Header: \"Step\",\r\n                  accessor: \"box_step\"\r\n                },\r\n                {\r\n                  Header: \"State\",\r\n                  accessor: \"box_state\"\r\n                },\r\n                {\r\n                  Header: \"Dispatch\",\r\n                  accessor: \"job_dispatch\"\r\n                }\r\n              ]\r\n            }\r\n          ]}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        >\r\n           {(state, makeTable, instance) => {\r\n              return (\r\n                \r\n                <div>\r\n                  {makeTable()}\r\n                </div>\r\n              )\r\n            }}\r\n          </ReactTable>\r\n        </div>\r\n      );\r\n    }\r\n///\r\n/// HTTP GET/POST METHODS\r\n///\r\ngetBox(boxID)\r\n{\r\n    if(boxID==\"$36\"){boxID=6}\r\n    //alert(boxID)\r\n    //boxID = 6\r\n    var path = \"http://localhost:52773/BoxTracker/boxes/\"+boxID\r\n    //TEMPORARY\r\n    //jobID = \"1\"\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(path, requestOptions)\r\n        .then(this.handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n              //alert(JSON.stringify(response))\r\n              this.setState({\r\n                  box : response\r\n              })\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\ngetBoxes()\r\n{\r\n    //alert(boxID)\r\n    //boxID = 6\r\n    var path = \"http://localhost:52773/BoxTracker/boxes\"\r\n    //TEMPORARY\r\n    //jobID = \"1\"\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(path, requestOptions)\r\n        .then(this.handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n              //alert(JSON.stringify(response))\r\n              this.setState({\r\n                  boxes : response\r\n              })\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\nhandleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nhandleGetResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n  }\r\n  \r\n\r\nexport default ScanBarcode;\r\n"]},"metadata":{},"sourceType":"module"}