{"ast":null,"code":"import React from 'react';\n\nclass customerService extends React.Component {}\n\nfunction addCustomer(customer_name) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n    },\n    body: JSON.stringify({\n      'customer_name': customer_name\n    })\n  };\n  return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions).then(handleResponse).then(response => {\n    if (response) {\n      alert(\"Customer Successfully Created\");\n    }\n\n    return response;\n  });\n}\n\nfunction getCustomers() {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n    }\n  };\n  return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions).then(handleGetResponse).then(response => {\n    if (response) {\n      localStorage.setItem('customers', JSON.stringify(response));\n    }\n\n    return response;\n  });\n}\n\nfunction getCustomerByID(customerID) {\n  var path = \"http://localhost:52773/csp/BoxTracker\" + customerID;\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n    }\n  };\n  return fetch(path, requestOptions).then(handleGetResponse).then(response => {\n    if (response) {\n      let CustomerReturn = JSON.parse(JSON.stringify(response));\n      let CustomerDetails = JSON.stringify(CustomerReturn[0]);\n      let CustomerJobs = JSON.stringify(CustomerReturn[1]);\n      this.setState({\n        customer: CustomerDetails,\n        customerJobs: CustomerJobs\n      }); //localStorage.setItem('customer', CustomerDetails);\n      //localStorage.setItem('customerJobs', CustomerJobs)\n    }\n\n    return response;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n        Location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nfunction handleGetResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default customerService;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\Services\\customerService.js"],"names":["React","customerService","Component","addCustomer","customer_name","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","response","alert","getCustomers","handleGetResponse","localStorage","setItem","getCustomerByID","customerID","path","CustomerReturn","parse","CustomerDetails","CustomerJobs","setState","customer","customerJobs","text","data","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import React from 'react';\r\nclass customerService extends React.Component{\r\n\r\n}\r\n\r\nfunction addCustomer(customer_name)\r\n{\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            },\r\n        body: JSON.stringify({'customer_name': customer_name})\r\n        };\r\n    return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions)\r\n    .then(handleResponse).then(response => {\r\n            if(response)\r\n            {   \r\n                alert(\"Customer Successfully Created\")\r\n            }\r\n            return response;\r\n        }\r\n    )\r\n        \r\n}\r\n\r\nfunction getCustomers()\r\n{\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions)\r\n        .then(handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n                localStorage.setItem('customers', JSON.stringify(response));\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\nfunction getCustomerByID(customerID)\r\n{\r\n    var path = \"http://localhost:52773/csp/BoxTracker\"+customerID\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(path, requestOptions)\r\n        .then(handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n                let CustomerReturn = JSON.parse(JSON.stringify(response))\r\n                let CustomerDetails = JSON.stringify(CustomerReturn[0])\r\n                let CustomerJobs = JSON.stringify(CustomerReturn[1])\r\n                this.setState({\r\n                    customer: CustomerDetails,\r\n                    customerJobs: CustomerJobs})\r\n                //localStorage.setItem('customer', CustomerDetails);\r\n                //localStorage.setItem('customerJobs', CustomerJobs)\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nfunction handleGetResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\nexport default customerService;"]},"metadata":{},"sourceType":"module"}