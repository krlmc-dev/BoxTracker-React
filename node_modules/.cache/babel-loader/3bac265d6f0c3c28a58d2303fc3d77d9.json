{"ast":null,"code":"export const jobService = {\n  //addJob,\n  getJobs,\n  getJobByID\n};\n\nfunction getJobs() {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n    }\n  };\n  return fetch(\"http://localhost:52773/csp/BoxTracker/jobs\", requestOptions).then(handleGetResponse).then(response => {\n    if (response) {\n      localStorage.setItem('jobs', JSON.stringify(response));\n    }\n\n    return response;\n  });\n}\n\nfunction getJobByID(jobID) {\n  //TEMPORARY\n  jobID = \"1\";\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n    }\n  };\n  return fetch(\"http://localhost:52773/csp/BoxTracker/job/\", {\n    jobID\n  }, requestOptions).then(handleGetResponse).then(response => {\n    if (response) {\n      localStorage.setItem('job', JSON.stringify(response));\n    }\n\n    return response;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n        Location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nfunction handleGetResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default jobService;","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Services\\jobService.js"],"names":["jobService","getJobs","getJobByID","requestOptions","method","headers","fetch","then","handleGetResponse","response","localStorage","setItem","JSON","stringify","jobID","handleResponse","text","data","parse","ok","status","alert","Location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG;AACtB;AACAC,EAAAA,OAFsB;AAGtBC,EAAAA;AAHsB,CAAnB;;AAMP,SAASD,OAAT,GACA;AACI,QAAME,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAgB;AAFX;AAFU,GAAvB;AAOA,SAAOC,KAAK,CAAC,4CAAD,EAA+CH,cAA/C,CAAL,CACFI,IADE,CACGC,iBADH,EAEFD,IAFE,CAEGE,QAAQ,IAAI;AACd,QAAIA,QAAJ,EAAc;AACVC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAA7B;AACH;;AACD,WAAOA,QAAP;AACH,GAPE,CAAP;AAQH;;AAED,SAASP,UAAT,CAAoBY,KAApB,EACA;AACI;AACAA,EAAAA,KAAK,GAAG,GAAR;AACA,QAAMX,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAgB;AAFX;AAFU,GAAvB;AAOA,SAAOC,KAAK,CAAC,4CAAD,EAA8C;AAACQ,IAAAA;AAAD,GAA9C,EAAuDX,cAAvD,CAAL,CACFI,IADE,CACGC,iBADH,EAEFD,IAFE,CAEGE,QAAQ,IAAI;AACd,QAAIA,QAAJ,EAAc;AACVC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAA5B;AACH;;AACD,WAAOA,QAAP;AACH,GAPE,CAAP;AAQH;;AAED,SAASM,cAAT,CAAwBN,QAAxB,EAAkC;AAE9B,SAAOA,QAAQ,CAACO,IAAT,GAAgBT,IAAhB,CAAqBS,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIJ,IAAI,CAACM,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACP,QAAQ,CAACU,EAAd,EAAkB;AACd,UAAIV,QAAQ,CAACW,MAAT,KAAoB,GAAxB,EAA6B;AACzBC,QAAAA,KAAK,CAAC,aAAD,CAAL,CADyB,CAEzB;;AACAC,QAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AAED,YAAMC,KAAK,GAAIP,IAAI,IAAIA,IAAI,CAACQ,OAAd,IAA0BhB,QAAQ,CAACiB,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,WAAOP,IAAP;AACH,GAbM,CAAP;AAcH;;AAED,SAAST,iBAAT,CAA2BC,QAA3B,EAAqC;AAEjC,SAAOA,QAAQ,CAACO,IAAT,GAAgBT,IAAhB,CAAqBS,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIJ,IAAI,CAACM,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACP,QAAQ,CAACU,EAAd,EAAkB;AACd,YAAMK,KAAK,GAAIP,IAAI,IAAIA,IAAI,CAACQ,OAAd,IAA0BhB,QAAQ,CAACiB,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,WAAOP,IAAP;AACH,GAPM,CAAP;AAQH;;AACD,eAAejB,UAAf","sourcesContent":["export const jobService = {\r\n    //addJob,\r\n    getJobs,\r\n    getJobByID\r\n}\r\n\r\nfunction getJobs()\r\n{\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(\"http://localhost:52773/csp/BoxTracker/jobs\", requestOptions)\r\n        .then(handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n                localStorage.setItem('jobs', JSON.stringify(response));\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\nfunction getJobByID(jobID)\r\n{\r\n    //TEMPORARY\r\n    jobID = \"1\"\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(\"http://localhost:52773/csp/BoxTracker/job/\",{jobID}, requestOptions)\r\n        .then(handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n                localStorage.setItem('job', JSON.stringify(response));\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nfunction handleGetResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\nexport default jobService;"]},"metadata":{},"sourceType":"module"}