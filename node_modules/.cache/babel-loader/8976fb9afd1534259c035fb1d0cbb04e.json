{"ast":null,"code":"export const userService = {\n  login,\n  logout\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(\"localhost:52773/csp/BoxTracker/login\", requestOptions).then(handleResponse).then(user => {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage \n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\userService.js"],"names":["userService","login","logout","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","removeItem","response","text","data","parse","ok","status","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA;AAFuB,CAApB;;AAKP,SAASD,KAAT,CAAeE,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,yCAAyCN,cAAzC,CAAL,CACFO,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACA,QAAIA,IAAJ,EAAU;AACN;AACA;AACAA,MAAAA,IAAI,CAACC,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYd,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAc,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BV,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AACH;;AAED,WAAOA,IAAP;AACH,GAZE,CAAP;AAaH;;AAED,SAASZ,MAAT,GAAkB;AACd;AACAgB,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASP,cAAT,CAAwBQ,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBV,IAAhB,CAAqBU,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIb,IAAI,CAACe,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAxB,QAAAA,MAAM;AACNyB,QAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AAED,YAAMC,KAAK,GAAIN,IAAI,IAAIA,IAAI,CAACO,OAAd,IAA0BT,QAAQ,CAACU,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAON,IAAP;AACH,GAdM,CAAP;AAeH;;AACD,eAAevB,WAAf","sourcesContent":["export const userService = {\r\n    login,\r\n    logout\r\n};\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n\r\n    return fetch(`localhost:52773/csp/BoxTracker/login`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // login successful if there's a user in the response\r\n            if (user) {\r\n                // store user details and basic auth credentials in local storage \r\n                // to keep user logged in between page refreshes\r\n                user.authdata = window.btoa(username + ':' + password);\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            }\r\n\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}\r\nexport default userService;\r\n"]},"metadata":{},"sourceType":"module"}