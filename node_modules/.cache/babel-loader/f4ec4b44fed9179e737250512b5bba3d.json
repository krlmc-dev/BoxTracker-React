{"ast":null,"code":"import React from 'react';\n\nclass userService extends React.Component {\n  login(username, password) {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    };\n    return fetch(\"/users/authenticate\", requestOptions).then(this.handleResponse).then(user => {\n      // login successful if there's a user in the response\n      if (user) {\n        // store user details and basic auth credentials in local storage \n        // to keep user logged in between page refreshes\n        user.authdata = window.btoa(username + ':' + password);\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n\n      return user;\n    });\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          // auto logout if 401 response returned from api\n          this.logout();\n          this.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}\n\nexport default userService = {\n  login,\n  logout\n};","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\userService.js"],"names":["React","userService","Component","login","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","logout","removeItem","response","text","data","parse","ok","status","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAAyC;AAErCC,EAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACtB,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf;AAHa,KAAvB;AAMA,WAAOO,KAAK,wBAAwBN,cAAxB,CAAL,CACFO,IADE,CACG,KAAKC,cADR,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACA,UAAIA,IAAJ,EAAU;AACN;AACA;AACAA,QAAAA,IAAI,CAACC,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYd,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAc,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BV,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AACH;;AAED,aAAOA,IAAP;AACH,KAZE,CAAP;AAaH;;AAEDM,EAAAA,MAAM,GAAG;AACL;AACAF,IAAAA,YAAY,CAACG,UAAb,CAAwB,MAAxB;AACH;;AAEDR,EAAAA,cAAc,CAACS,QAAD,EAAW;AACrB,WAAOA,QAAQ,CAACC,IAAT,GAAgBX,IAAhB,CAAqBW,IAAI,IAAI;AAChC,YAAMC,IAAI,GAAGD,IAAI,IAAId,IAAI,CAACgB,KAAL,CAAWF,IAAX,CAArB;;AACA,UAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,YAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACA,eAAKP,MAAL;AACA,eAAKQ,MAAL,CAAY,IAAZ;AACH;;AAED,cAAMC,KAAK,GAAIL,IAAI,IAAIA,IAAI,CAACM,OAAd,IAA0BR,QAAQ,CAACS,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,aAAOL,IAAP;AACH,KAdM,CAAP;AAeH;;AA7CoC;;AAgDzC,eAAexB,WAAW,GAAG;AACzBE,EAAAA,KADyB;AAEzBkB,EAAAA;AAFyB,CAA7B","sourcesContent":["import React from 'react';\r\n\r\nclass userService extends React.Component{\r\n    \r\n    login(username, password) {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ username, password })\r\n        };\r\n    \r\n        return fetch(`/users/authenticate`, requestOptions)\r\n            .then(this.handleResponse)\r\n            .then(user => {\r\n                // login successful if there's a user in the response\r\n                if (user) {\r\n                    // store user details and basic auth credentials in local storage \r\n                    // to keep user logged in between page refreshes\r\n                    user.authdata = window.btoa(username + ':' + password);\r\n                    localStorage.setItem('user', JSON.stringify(user));\r\n                }\r\n    \r\n                return user;\r\n            });\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('user');\r\n    }\r\n\r\n    handleResponse(response) {\r\n        return response.text().then(text => {\r\n            const data = text && JSON.parse(text);\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    // auto logout if 401 response returned from api\r\n                    this.logout();\r\n                    this.reload(true);\r\n                }\r\n    \r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n    \r\n            return data;\r\n        });\r\n    }\r\n    \r\n}\r\nexport default userService = {\r\n    login,\r\n    logout\r\n};"]},"metadata":{},"sourceType":"module"}