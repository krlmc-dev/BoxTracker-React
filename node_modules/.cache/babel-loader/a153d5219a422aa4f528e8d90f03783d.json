{"ast":null,"code":"export const userService = {\n  login,\n  logout\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorisation': 'Basic U3VwZXJVc2VyOlBBU1M=',\n      'accept': 'application/json'\n    }\n  };\n  let boxURL = \"http://localhost:52773/csp/BoxTracker/login\" + this.requestOptions;\n  alert(boxURL);\n  return fetch(\"http://localhost:52773/csp/BoxTracker/login\", requestOptions).then(handleResponse).then(user => {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage \n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('user', JSON.stringify(user));\n      alert(\"Logged In!\");\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      alert(\"test\");\n\n      if (response.status === 401) {\n        alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n        logout();\n        Location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\userService.js"],"names":["userService","login","logout","username","password","requestOptions","method","headers","boxURL","alert","fetch","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","JSON","stringify","removeItem","response","text","data","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA;AAFuB,CAApB;;AAKP,SAASD,KAAT,CAAeE,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,QAAMC,cAAc,GAAG;AAEnBC,IAAAA,MAAM,EAAE,KAFW;AAGnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAgB,4BAFX;AAGL,gBAAS;AAHJ;AAHU,GAAvB;AAUI,MAAIC,MAAM,GAAI,gDAA+C,KAAKH,cAAlE;AACAI,EAAAA,KAAK,CAACD,MAAD,CAAL;AACJ,SAAOE,KAAK,gDAAgDL,cAAhD,CAAL,CACFM,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACA,QAAIA,IAAJ,EAAU;AAEN;AACA;AACAA,MAAAA,IAAI,CAACC,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYb,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAa,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAA7B;AACAJ,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAED,WAAOI,IAAP;AACH,GAdE,CAAP;AAeH;;AAED,SAASX,MAAT,GAAkB;AACd;AACAe,EAAAA,YAAY,CAACI,UAAb,CAAwB,MAAxB;AACH;;AAED,SAAST,cAAT,CAAwBU,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBZ,IAAhB,CAAqBY,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIJ,IAAI,CAACM,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACdjB,MAAAA,KAAK,CAAC,MAAD,CAAL;;AACA,UAAIa,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzBlB,QAAAA,KAAK,CAAC,aAAD,CAAL,CADyB,CAEzB;;AACAP,QAAAA,MAAM;AACN0B,QAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AAED,YAAMC,KAAK,GAAIN,IAAI,IAAIA,IAAI,CAACO,OAAd,IAA0BT,QAAQ,CAACU,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,WAAON,IAAP;AACH,GAfM,CAAP;AAgBH;;AACD,eAAexB,WAAf","sourcesContent":["export const userService = {\r\n    login,\r\n    logout\r\n};\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        \r\n        method: 'GET',\r\n        headers: { \r\n            'Content-Type': 'application/json',\r\n            'authorisation':'Basic U3VwZXJVc2VyOlBBU1M=', \r\n            'accept':'application/json'\r\n            }\r\n        };\r\n\r\n        let boxURL = (`http://localhost:52773/csp/BoxTracker/login`+ this.requestOptions)\r\n        alert(boxURL)\r\n    return fetch(`http://localhost:52773/csp/BoxTracker/login`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // login successful if there's a user in the response\r\n            if (user) {\r\n                \r\n                // store user details and basic auth credentials in local storage \r\n                // to keep user logged in between page refreshes\r\n                user.authdata = window.btoa(username + ':' + password);\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n                alert(\"Logged In!\")\r\n            }\r\n\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            alert(\"test\")\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\nexport default userService;\r\n"]},"metadata":{},"sourceType":"module"}