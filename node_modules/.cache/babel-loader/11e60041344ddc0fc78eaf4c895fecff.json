{"ast":null,"code":"export const userService = {\n  login,\n  logout\n};\n\nasync function login(username, password) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorisation': 'Basic U3VwZXJVc2VyOlBBU1M='\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  const response = await fetch(\"http://localhost:52773/csp/BoxTracker/login\", requestOptions);\n  const user = await handleResponse(response); // login successful if there's a user in the response\n\n  if (user) {\n    // store user details and basic auth credentials in local storage \n    // to keep user logged in between page refreshes\n    user.authdata = window.btoa(username + ':' + password);\n    localStorage.setItem('user', JSON.stringify(user));\n    alert(\"Logged In!\");\n  }\n\n  return user;\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction handleResponse(response) {\n  alert(\"Response!\");\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        Location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\userService.js"],"names":["userService","login","logout","username","password","requestOptions","method","headers","body","JSON","stringify","response","fetch","user","handleResponse","authdata","window","btoa","localStorage","setItem","alert","removeItem","text","then","data","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA;AAFuB,CAApB;;AAKP,eAAeD,KAAf,CAAqBE,QAArB,EAA+BC,QAA/B,EAAyC;AACrC,QAAMC,cAAc,GAAG;AAEnBC,IAAAA,MAAM,EAAE,KAFW;AAGnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAqC,uBAAgB;AAArD,KAHU;AAInBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAJa,GAAvB;AAMA,QAAMO,QAAQ,GAAG,MAAMC,KAAK,gDAAgDP,cAAhD,CAA5B;AACA,QAAMQ,IAAI,GAAG,MAAMC,cAAc,CAACH,QAAD,CAAjC,CARqC,CASrC;;AACA,MAAIE,IAAJ,EAAU;AACN;AACA;AACAA,IAAAA,IAAI,CAACE,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYd,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAc,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BV,IAAI,CAACC,SAAL,CAAeG,IAAf,CAA7B;AACAO,IAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AACD,SAAOP,IAAP;AACH;;AAED,SAASX,MAAT,GAAkB;AACd;AACAgB,EAAAA,YAAY,CAACG,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASP,cAAT,CAAwBH,QAAxB,EAAkC;AAC9BS,EAAAA,KAAK,CAAC,WAAD,CAAL;AACA,SAAOT,QAAQ,CAACW,IAAT,GAAgBC,IAAhB,CAAqBD,IAAI,IAAI;AAChC,UAAME,IAAI,GAAGF,IAAI,IAAIb,IAAI,CAACgB,KAAL,CAAWH,IAAX,CAArB;;AACA,QAAI,CAACX,QAAQ,CAACe,EAAd,EAAkB;AACd,UAAIf,QAAQ,CAACgB,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAzB,QAAAA,MAAM;AACN0B,QAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AAED,YAAMC,KAAK,GAAIN,IAAI,IAAIA,IAAI,CAACO,OAAd,IAA0BpB,QAAQ,CAACqB,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAON,IAAP;AACH,GAdM,CAAP;AAeH;;AACD,eAAexB,WAAf","sourcesContent":["export const userService = {\r\n    login,\r\n    logout\r\n};\r\n\r\nasync function login(username, password) {\r\n    const requestOptions = {\r\n        \r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json','authorisation':'Basic U3VwZXJVc2VyOlBBU1M='},\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n    const response = await fetch(`http://localhost:52773/csp/BoxTracker/login`, requestOptions);\r\n    const user = await handleResponse(response);\r\n    // login successful if there's a user in the response\r\n    if (user) {\r\n        // store user details and basic auth credentials in local storage \r\n        // to keep user logged in between page refreshes\r\n        user.authdata = window.btoa(username + ':' + password);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        alert(\"Logged In!\");\r\n    }\r\n    return user;\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    alert(\"Response!\")\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}\r\nexport default userService;\r\n"]},"metadata":{},"sourceType":"module"}