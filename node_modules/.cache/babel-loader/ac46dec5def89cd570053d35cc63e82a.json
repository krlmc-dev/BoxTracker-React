{"ast":null,"code":"var _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Pages\\\\ScanBarcode.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactTable from 'react-table';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Route, Link, HashRouter } from 'react-router-dom';\nimport \"react-table/react-table.css\";\nimport JSONTree from 'react-json-tree';\nimport ContinueDialogue from './ContinueDialogue';\nimport '../Menu.css';\nimport '../customers.css';\n\nclass ScanBarcode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.params = {};\n    this.state = {\n      user: {},\n      box: [],\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {//ReactDOM.findDOMNode(this.refs.divFocus).focus();\n  }\n\n  componentDidUpdate() {\n    this.goStep();\n  }\n\n  handleChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    this.getBox(this.state.value);\n    this.setState({\n      value: \"\"\n    });\n    e.preventDefault();\n  }\n\n  goStep() {\n    const box = this.state.box;\n    box.map((data, i) => {\n      let step = data.box_step; //if current workstation = the step the box is up to, continue\n\n      if (localStorage.getItem(\"Workstation\") == step) {\n        var path = \"/box/\" + data.box_id + \"/\" + step;\n        this.props.history.push(path);\n      } else {\n        alert(\"continue\");\n      }\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          box = _this$state.box,\n          boxID = _this$state.boxID;\n    var menuStyle = {\n      margin: 'auto',\n      padding: 40,\n      // width: 700,\n      height: 400,\n      overflow: 'auto'\n    };\n    var customerStyle = {\n      margin: 'auto',\n      padding: 20,\n      overflow: 'auto'\n    };\n    return React.createElement(\"div\", {\n      className: \"Menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"Menu-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Box Tracker\")), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: \"barcode-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Scan Barcode\"), React.createElement(TextField, {\n      autoFocus: true,\n      value: this.state.value,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(ReactTable, {\n      getTrGroupProps: (state, rowInfo) => {\n        if (rowInfo !== undefined) {\n          return {\n            onClick: () => {\n              var path = \"/box/\" + rowInfo.row.box_id;\n              this.props.history.push(path);\n            },\n            style: {\n              cursor: 'pointer',\n              background: rowInfo.original.id === this.state.selectedIndex ? '#00afec' : 'white',\n              color: rowInfo.original.id === this.state.selectedIndex ? 'white' : 'black'\n            }\n          };\n        }\n      },\n      data: box,\n      columns: [{\n        Header: \"Box\",\n        columns: [{\n          Header: \"Box ID\",\n          accessor: \"box_id\"\n        }, {\n          Header: \"Job ID\",\n          accessor: \"job_id\"\n        }, {\n          Header: \"Customer\",\n          accessor: \"customer_name\"\n        }, {\n          Header: \"Location\",\n          accessor: \"box_location\"\n        }, {\n          Header: \"Operator\",\n          accessor: \"box_operator\"\n        }, {\n          Header: \"Step\",\n          accessor: \"box_step\"\n        }, {\n          Header: \"State\",\n          accessor: \"box_state\"\n        }, {\n          Header: \"Dispatch\",\n          accessor: \"job_dispatch\"\n        }]\n      }],\n      defaultPageSize: 10,\n      className: \"-striped -highlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, (state, makeTable, instance) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, makeTable());\n    }), React.createElement(ContinueDialogue, {\n      onClick: () => {\n        var path = \"/boxes\";\n        this.props.history.push(path);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }));\n  } ///\n  /// HTTP GET/POST METHODS\n  ///\n\n\n  getBox(boxID) {\n    if (boxID == \"$36\") {\n      boxID = 6;\n    } //alert(boxID)\n    //boxID = 6\n\n\n    var path = \"http://localhost:52773/BoxTracker/boxes/\" + boxID; //TEMPORARY\n    //jobID = \"1\"\n\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        //alert(JSON.stringify(response))\n        this.setState({\n          box: response\n        });\n      }\n\n      return response;\n    });\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}\n\nexport default ScanBarcode;","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Pages\\ScanBarcode.jsx"],"names":["React","ReactDOM","ReactTable","TextField","withStyles","Route","Link","HashRouter","JSONTree","ContinueDialogue","ScanBarcode","Component","constructor","props","params","state","user","box","loading","handleChange","bind","handleSubmit","componentDidMount","componentDidUpdate","goStep","e","setState","value","target","getBox","preventDefault","map","data","i","step","box_step","localStorage","getItem","path","box_id","history","push","alert","render","boxID","menuStyle","margin","padding","height","overflow","customerStyle","rowInfo","undefined","onClick","row","style","cursor","background","original","id","selectedIndex","color","Header","columns","accessor","makeTable","instance","requestOptions","method","headers","fetch","then","handleGetResponse","response","handleResponse","text","JSON","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactTable from 'react-table';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Route, Link, HashRouter} from 'react-router-dom';\r\nimport \"react-table/react-table.css\";\r\nimport JSONTree from 'react-json-tree'\r\n\r\nimport ContinueDialogue from './ContinueDialogue';\r\n\r\nimport '../Menu.css';\r\nimport '../customers.css';\r\n\r\nclass ScanBarcode extends React.Component{\r\n  constructor(props)\r\n  {\r\n      \r\n      super(props);\r\n      this.params = {};\r\n      this.state = {\r\n          user: {},\r\n          box: [],\r\n          loading: false,\r\n      };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    \r\n  }\r\n  componentDidMount()\r\n  {\r\n    //ReactDOM.findDOMNode(this.refs.divFocus).focus();\r\n  }\r\n\r\n  componentDidUpdate()\r\n  {\r\n    this.goStep()\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({value: e.target.value});\r\n  }\r\n\r\n    handleSubmit(e) {\r\n      this.getBox(this.state.value)\r\n      this.setState({value: \"\"})\r\n      e.preventDefault();\r\n    }\r\n    \r\n  goStep()\r\n  {\r\n    \r\n    const {box} = this.state\r\n    box.map((data, i) => {\r\n      let step = data.box_step\r\n      //if current workstation = the step the box is up to, continue\r\n      \r\n      if(localStorage.getItem(\"Workstation\")==step){\r\n        var path = \"/box/\"+data.box_id+\"/\"+step\r\n        this.props.history.push(path);\r\n      }\r\n      else\r\n      {\r\n        alert(\"continue\")\r\n          \r\n      }\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { box, boxID} = this.state\r\n    var menuStyle = {\r\n      margin: 'auto',\r\n      padding: 40,\r\n     // width: 700,\r\n      height: 400,\r\n      overflow: 'auto',\r\n    };\r\n    var customerStyle = {\r\n        margin: 'auto',\r\n        padding: 20,\r\n        overflow: 'auto',\r\n      };\r\n    \r\n    return (\r\n        \r\n        <div className=\"Menu\">\r\n            <header className=\"Menu-header\">\r\n            <h1>Box Tracker</h1>\r\n          </header>\r\n          <form onSubmit={this.handleSubmit}>\r\n           <br/>\r\n           <label for=\"barcode-input\">Scan Barcode</label>\r\n            <TextField autoFocus  value={this.state.value} onChange={this.handleChange} />\r\n          \r\n          </form>\r\n          <ReactTable\r\n          getTrGroupProps={(state, rowInfo) => {\r\n            if (rowInfo !== undefined) {\r\n              return {\r\n                  onClick: () => {\r\n                    var path = \"/box/\"+rowInfo.row.box_id\r\n                    this.props.history.push(path);\r\n                  },\r\n                  style: {\r\n                      cursor: 'pointer',\r\n                      background: rowInfo.original.id === this.state.selectedIndex ? '#00afec' : 'white',\r\n                      color: rowInfo.original.id === this.state.selectedIndex ? 'white' : 'black'\r\n                              }\r\n                          }\r\n                    }}\r\n                }\r\n          data={box}\r\n          columns={[\r\n            {\r\n              Header: \"Box\",\r\n              columns: [\r\n                {\r\n                  Header: \"Box ID\",\r\n                  accessor: \"box_id\"\r\n                },\r\n                {\r\n                  Header: \"Job ID\",\r\n                  accessor: \"job_id\"\r\n                },\r\n                {\r\n                  Header: \"Customer\",\r\n                  accessor: \"customer_name\"\r\n                },\r\n                {\r\n                  Header: \"Location\",\r\n                  accessor: \"box_location\"\r\n                },\r\n                {\r\n                  Header: \"Operator\",\r\n                  accessor: \"box_operator\"\r\n                },\r\n                {\r\n                  Header: \"Step\",\r\n                  accessor: \"box_step\"\r\n                },\r\n                {\r\n                  Header: \"State\",\r\n                  accessor: \"box_state\"\r\n                },\r\n                {\r\n                  Header: \"Dispatch\",\r\n                  accessor: \"job_dispatch\"\r\n                }\r\n              ]\r\n            }\r\n          ]}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        >\r\n           {(state, makeTable, instance) => {\r\n              return (\r\n                \r\n                <div>\r\n                  {makeTable()}\r\n                </div>\r\n              )\r\n            }}\r\n          </ReactTable>\r\n          <ContinueDialogue onClick={()=>{\r\n            var path = \"/boxes\"\r\n            this.props.history.push(path);\r\n            }}/>\r\n        </div>\r\n      );\r\n    }\r\n///\r\n/// HTTP GET/POST METHODS\r\n///\r\ngetBox(boxID)\r\n{\r\n    if(boxID==\"$36\"){boxID=6}\r\n    //alert(boxID)\r\n    //boxID = 6\r\n    var path = \"http://localhost:52773/BoxTracker/boxes/\"+boxID\r\n    //TEMPORARY\r\n    //jobID = \"1\"\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(path, requestOptions)\r\n        .then(this.handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n              //alert(JSON.stringify(response))\r\n              this.setState({\r\n                  box : response\r\n              })\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\nhandleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nhandleGetResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n  }\r\n  \r\n\r\nexport default ScanBarcode;\r\n"]},"metadata":{},"sourceType":"module"}