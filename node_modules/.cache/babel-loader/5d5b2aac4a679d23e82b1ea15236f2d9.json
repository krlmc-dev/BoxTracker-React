{"ast":null,"code":"import _slicedToArray from \"C:\\\\BoxTracker-React\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\BoxTracker-React\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Pages\\\\AddJob.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { withRouter } from \"react-router\";\nimport jobService from '../Services/jobService';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport '../Menu.css';\nimport '../index.css';\nconst propTypes = {\n  location: PropTypes.object.isRequired\n};\n\nclass AddJob extends React.Component {\n  constructor(props) {\n    super(props);\n    this.test = React.createRef();\n    this.params = {};\n    this.state = {\n      user: {},\n      customer_name: '',\n      numBoxes: '',\n      jobLocation: 'Loading Dock',\n      jobDispatch: 'Archive',\n      submitted: false,\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setValues(oldValues => _objectSpread({}, oldValues, {\n      [event.target.name]: event.target.value\n    }));\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      submitted: true\n    });\n    const _this$state = this.state,\n          customer_id = _this$state.customer_id,\n          numBoxes = _this$state.numBoxes,\n          jobLocation = _this$state.jobLocation,\n          jobDispatch = _this$state.jobDispatch,\n          returnUrl = _this$state.returnUrl;\n    alert(this.test.current); // stop here if form is invalid\n\n    if (!numBoxes) {\n      return;\n    }\n\n    this.setState({\n      loading: true\n    });\n    this.addJob(this.props.match.params.id, numBoxes, jobLocation, jobDispatch).then(response => {\n      this.setState({\n        loading: false\n      });\n    }, error => this.setState({\n      error,\n      loading: false\n    }));\n    var path = \"/customer/\" + this.props.match.params.id;\n    this.props.history.push(path);\n  }\n\n  render() {\n    var path = \"/customer/\" + this.props.match.params.id;\n    const _this$state2 = this.state,\n          user = _this$state2.user,\n          customerID = _this$state2.customerID,\n          numBoxes = _this$state2.numBoxes,\n          jobLocation = _this$state2.jobLocation,\n          otherLocation = _this$state2.otherLocation,\n          submitted = _this$state2.submitted,\n          loading = _this$state2.loading;\n    const useStyles = makeStyles(theme => ({\n      root: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120\n      },\n      selectEmpty: {\n        marginTop: theme.spacing(2)\n      }\n    }));\n\n    const _React$useState = React.useState({\n      location: ''\n    }),\n          _React$useState2 = _slicedToArray(_React$useState, 2),\n          values = _React$useState2[0],\n          setValues = _React$useState2[1];\n\n    const locationSelect = React.useRef(null);\n\n    const _React$useState3 = React.useState(0),\n          _React$useState4 = _slicedToArray(_React$useState3, 2),\n          labelWidth = _React$useState4[0],\n          setLabelWidth = _React$useState4[1];\n\n    React.useEffect(() => {\n      setLabelWidth(locationSelect.current.offsetWidth);\n    }, []);\n    return React.createElement(\"div\", {\n      className: \"Menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"Menu-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Box Tracker\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, localStorage.getItem('customer_name')), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Add New Job\")), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: classes.root,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      variant: \"outlined\",\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      ref: locationSelect,\n      htmlFor: \"outlined-location-simple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Location\"), React.createElement(Select, {\n      value: values.location,\n      onChange: this.handleChange,\n      labelWidth: labelWidth,\n      inputProps: {\n        name: 'location',\n        id: 'outlined-location-simple'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      value: \"Loading Dock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Loading Dock\"), React.createElement(MenuItem, {\n      value: \"Front Door\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Front Door\"), React.createElement(MenuItem, {\n      value: \"Staging Area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Staging Area\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Create\")))));\n  }\n\n  addJob(customer_id, job_numboxes, job_location, job_dispatch) {\n    var path = \"http://localhost:52773/BoxTracker/jobs\";\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      },\n      body: JSON.stringify({\n        'customer_id': customer_id,\n        'job_numboxes': job_numboxes,\n        'job_location': job_location,\n        'operator_id': localStorage.getItem(\"operator_id\"),\n        'job_dispatch': job_dispatch\n      })\n    };\n    return fetch(path, requestOptions).then(this.handleResponse).then(response => {\n      if (response) {\n        alert(\"Job Successfully Created\");\n      }\n\n      return response;\n    });\n  }\n\n}\n\nexport default AddJob;","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Pages\\AddJob.jsx"],"names":["React","ReactDOM","withRouter","jobService","PropTypes","makeStyles","InputLabel","MenuItem","FormHelperText","FormControl","Select","propTypes","location","object","isRequired","AddJob","Component","constructor","props","test","createRef","params","state","user","customer_name","numBoxes","jobLocation","jobDispatch","submitted","loading","handleChange","bind","handleSubmit","event","setValues","oldValues","target","name","value","e","preventDefault","setState","customer_id","returnUrl","alert","current","addJob","match","id","then","response","error","path","history","push","render","customerID","otherLocation","useStyles","theme","root","display","flexWrap","formControl","margin","spacing","minWidth","selectEmpty","marginTop","useState","values","locationSelect","useRef","labelWidth","setLabelWidth","useEffect","offsetWidth","localStorage","getItem","classes","job_numboxes","job_location","job_dispatch","requestOptions","method","headers","body","JSON","stringify","fetch","handleResponse"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { withRouter } from \"react-router\";\r\nimport jobService from '../Services/jobService';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport '../Menu.css';\r\nimport '../index.css'\r\n\r\nconst propTypes ={\r\n  location: PropTypes.object.isRequired\r\n}\r\n\r\nclass AddJob extends React.Component{\r\n \r\n  constructor(props)\r\n  {\r\n      super(props);\r\n      this.test = React.createRef();\r\n      this.params = {};\r\n      this.state = {\r\n          \r\n          user: {},\r\n          customer_name: '',\r\n          numBoxes:'',\r\n          jobLocation:'Loading Dock',\r\n          jobDispatch:'Archive',\r\n          submitted: false,\r\n          loading: false\r\n      };\r\n    \r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n    handleChange(event) \r\n    {\r\n      this.setValues(oldValues => ({\r\n        ...oldValues,\r\n        [event.target.name]: event.target.value,\r\n      }));\r\n    }\r\n\r\n    handleSubmit(e)\r\n    {\r\n        e.preventDefault();\r\n        this.setState({ submitted: true });\r\n        const { customer_id, numBoxes, jobLocation, jobDispatch, returnUrl } = this.state;\r\n        alert(this.test.current)\r\n        // stop here if form is invalid\r\n        if (!(numBoxes))\r\n        {\r\n            \r\n            return;\r\n        }\r\n        this.setState({ loading: true });\r\n        \r\n        this.addJob(this.props.match.params.id, numBoxes, jobLocation, jobDispatch)\r\n        .then(\r\n            response => {\r\n                this.setState({loading: false});\r\n            },\r\n            error => this.setState({ error, loading: false })\r\n        );\r\n        var path = \"/customer/\"+this.props.match.params.id\r\n        this.props.history.push(path);\r\n    }\r\n\r\n  render(){\r\n    var path = \"/customer/\"+this.props.match.params.id\r\n    const { user, customerID, numBoxes, jobLocation, otherLocation, submitted, loading } = this.state;\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n      root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n      },\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n      selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    }));\r\n    const [values, setValues] = React.useState({\r\n      location: ''\r\n    });\r\n  \r\n    const locationSelect = React.useRef(null);\r\n    const [labelWidth, setLabelWidth] = React.useState(0);\r\n    React.useEffect(() => {\r\n      setLabelWidth(locationSelect.current.offsetWidth);\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <div className=\"Menu\">\r\n          <header className=\"Menu-header\">\r\n            <h1>Box Tracker</h1>\r\n            <h2>{localStorage.getItem('customer_name') }\r\n            </h2>\r\n            <p>Add New Job</p>\r\n          </header>\r\n          <div className=\"content\">\r\n          <form className={classes.root} autoComplete=\"off\">\r\n            <FormControl variant=\"outlined\" className={classes.formControl}>\r\n              <InputLabel ref={locationSelect} htmlFor=\"outlined-location-simple\">\r\n                Location\r\n              </InputLabel>\r\n              <Select\r\n                value={values.location}\r\n                onChange={this.handleChange}\r\n                labelWidth={labelWidth}\r\n                inputProps={{\r\n                  name: 'location',\r\n                  id: 'outlined-location-simple',\r\n                }}\r\n              >\r\n                <MenuItem value={\"Loading Dock\"}>Loading Dock</MenuItem>\r\n                <MenuItem value={\"Front Door\"}>Front Door</MenuItem>\r\n                <MenuItem value={\"Staging Area\"}>Staging Area</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <div className=\"form-group\">\r\n                <button className=\"btn btn-primary\">Create</button>\r\n            </div>\r\n          </form>\r\n          </div>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n\r\n    addJob(customer_id, job_numboxes, job_location, job_dispatch)\r\n    {\r\n      var path = \"http://localhost:52773/BoxTracker/jobs\"\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n                },\r\n            body: JSON.stringify({'customer_id': customer_id, 'job_numboxes': job_numboxes, 'job_location': job_location, 'operator_id':localStorage.getItem(\"operator_id\"), 'job_dispatch': job_dispatch})\r\n            };\r\n        return fetch(path, requestOptions)\r\n        .then(this.handleResponse).then(response => {\r\n                if(response)\r\n                {   \r\n                    alert(\"Job Successfully Created\")\r\n                }\r\n                return response;\r\n            }\r\n        )\r\n            \r\n    }\r\n  }\r\n  \r\n\r\nexport default AddJob;\r\n"]},"metadata":{},"sourceType":"module"}