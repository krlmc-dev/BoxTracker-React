{"ast":null,"code":"var _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Components\\\\Charts\\\\BoxLocationsChart.jsx\";\nimport React from \"react\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nexport default function LocationChart(props) {\n  const stats = props.stats;\n  const colors = [];\n  return React.createElement(BarChart, {\n    width: 600,\n    height: 300,\n    data: [stats[4], stats[5], stats[6], stats[7]],\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(Bar, {\n    dataKey: \"Number of Boxes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, (colors[0] = \"#2b9900\", colors[1] = \"#006399\", colors[2] = \"#e59400\", colors[3] = \"#f00\", stats.map((entry, index) => React.createElement(Cell, {\n    key: \"cell-\".concat(index),\n    fill: colors[index],\n    strokeWidth: index === 2 ? 4 : 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Components\\Charts\\BoxLocationsChart.jsx"],"names":["React","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","LocationChart","props","stats","colors","top","right","left","bottom","map","entry","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,QAAV,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,aAA7C,EAA4DC,OAA5D,EAAqEC,MAArE,QAAoF,UAApF;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AACxC,QAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,SACE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE,GADT;AAEE,IAAA,MAAM,EAAE,GAFV;AAGE,IAAA,IAAI,EAAE,CAACD,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B,EAA+BA,KAAK,CAAC,CAAD,CAApC,CAHR;AAIE,IAAA,MAAM,EAAE;AACNE,MAAAA,GAAG,EAAE,CADC;AACEC,MAAAA,KAAK,EAAE,EADT;AACaC,MAAAA,IAAI,EAAE,EADnB;AACuBC,MAAAA,MAAM,EAAE;AAD/B,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,aAAD;AAAe,IAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAWE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAYE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAaE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGIJ,MAAM,CAAC,CAAD,CAAN,GAAY,SAAZ,EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,SADZ,EAEAA,MAAM,CAAC,CAAD,CAAN,GAAY,SAFZ,EAGAA,MAAM,CAAC,CAAD,CAAN,GAAY,MAHZ,EAIAD,KAAK,CAACM,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KACR,oBAAC,IAAD;AAAM,IAAA,GAAG,iBAAUA,KAAV,CAAT;AAA4B,IAAA,IAAI,EAAEP,MAAM,CAACO,KAAD,CAAxC;AAAkD,IAAA,WAAW,EAAEA,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPJ,EAbF,CADF;AA4BD","sourcesContent":["import React from \"react\";\r\nimport {  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\r\n\r\nexport default function LocationChart(props){\r\n    const stats = props.stats\r\n    const colors = []\r\n    return (\r\n      <BarChart\r\n        width={600}\r\n        height={300}\r\n        data={[stats[4], stats[5], stats[6], stats[7]]}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"Number of Boxes\">\r\n          {\r\n            \r\n            colors[0] = \"#2b9900\",\r\n            colors[1] = \"#006399\",\r\n            colors[2] = \"#e59400\",\r\n            colors[3] = \"#f00\",\r\n            stats.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={colors[index]}  strokeWidth={index === 2 ? 4 : 1}/>\r\n            ))\r\n          }\r\n        </Bar>\r\n      </BarChart>\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}