{"ast":null,"code":"var _jsxFileName = \"C:\\\\BoxTracker\\\\boxtrackerwebbapp\\\\src\\\\Pages\\\\ScanBarcode.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\nimport JSONTree from 'react-json-tree';\nimport '../Menu.css';\nimport '../customers.css';\nconst JSONtheme = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633'\n};\n\nclass ScanBarcode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.params = {};\n    this.state = {\n      user: {},\n      box: [],\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBox(\"/boxes/6\");\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const box = this.state.box;\n    var menuStyle = {\n      margin: 'auto',\n      padding: 40,\n      // width: 700,\n      height: 400,\n      overflow: 'auto'\n    };\n    var customerStyle = {\n      margin: 'auto',\n      padding: 20,\n      overflow: 'auto'\n    };\n    return React.createElement(\"div\", {\n      className: \"Menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"Menu-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Box Tracker\")), React.createElement(ReactTable, {\n      data: box,\n      columns: [{\n        Header: \"Box\",\n        columns: [{\n          Header: \"Box ID\",\n          accessor: \"box_id\"\n        }, {\n          Header: \"Job ID\",\n          accessor: \"job_id\"\n        }, {\n          Header: \"Customer\",\n          accessor: \"customer_name\"\n        }]\n      }],\n      defaultPageSize: 10,\n      className: \"-striped -highlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, (state, makeTable, instance) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, makeTable());\n    }));\n  } ///\n  /// HTTP GET/POST METHODS\n  ///\n\n\n  getBox(jobID) {\n    var path = \"http://localhost:52773/csp/BoxTracker\" + jobID; //TEMPORARY\n    //jobID = \"1\"\n\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        this.setState({\n          box: response\n        });\n      }\n\n      return response;\n    });\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}\n\nexport default ScanBarcode;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\Pages\\ScanBarcode.jsx"],"names":["React","ReactDOM","ReactTable","JSONTree","JSONtheme","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","ScanBarcode","Component","constructor","props","params","state","user","box","loading","handleChange","bind","componentDidMount","getBox","e","target","name","value","setState","render","menuStyle","margin","padding","height","overflow","customerStyle","Header","columns","accessor","makeTable","instance","jobID","path","requestOptions","method","headers","fetch","then","handleGetResponse","response","handleResponse","text","data","JSON","parse","ok","status","alert","Location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport JSONTree from 'react-json-tree'\r\nimport '../Menu.css';\r\nimport '../customers.css';\r\n\r\nconst JSONtheme = {\r\n  scheme: 'monokai',\r\n  author: 'wimer hazenberg (http://www.monokai.nl)',\r\n  base00: '#272822',\r\n  base01: '#383830',\r\n  base02: '#49483e',\r\n  base03: '#75715e',\r\n  base04: '#a59f85',\r\n  base05: '#f8f8f2',\r\n  base06: '#f5f4f1',\r\n  base07: '#f9f8f5',\r\n  base08: '#f92672',\r\n  base09: '#fd971f',\r\n  base0A: '#f4bf75',\r\n  base0B: '#a6e22e',\r\n  base0C: '#a1efe4',\r\n  base0D: '#66d9ef',\r\n  base0E: '#ae81ff',\r\n  base0F: '#cc6633'\r\n}\r\n\r\nclass ScanBarcode extends React.Component{\r\n  constructor(props)\r\n  {\r\n      \r\n      super(props);\r\n      this.params = {};\r\n      this.state = {\r\n          user: {},\r\n          box: [],\r\n          loading: false\r\n      };\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n  }\r\n  componentDidMount()\r\n  {\r\n    this.getBox(\"/boxes/6\")\r\n  }\r\n\r\n    handleChange(e) \r\n    {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n    \r\n\r\n  render(){\r\n    const { box } = this.state\r\n    var menuStyle = {\r\n      margin: 'auto',\r\n      padding: 40,\r\n     // width: 700,\r\n      height: 400,\r\n      overflow: 'auto',\r\n    };\r\n    var customerStyle = {\r\n        margin: 'auto',\r\n        padding: 20,\r\n        overflow: 'auto',\r\n      };\r\n    \r\n    return (\r\n        \r\n        <div className=\"Menu\">\r\n            <header className=\"Menu-header\">\r\n            <h1>Box Tracker</h1>\r\n          </header>\r\n          \r\n          <ReactTable\r\n          data={box}\r\n          columns={[\r\n            {\r\n              Header: \"Box\",\r\n              columns: [\r\n                {\r\n                  Header: \"Box ID\",\r\n                  accessor: \"box_id\"\r\n                },\r\n                {\r\n                  Header: \"Job ID\",\r\n                  accessor: \"job_id\"\r\n                }\r\n                ,\r\n                {\r\n                  Header: \"Customer\",\r\n                  accessor: \"customer_name\"\r\n                }\r\n              ]\r\n            }\r\n          ]}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        >\r\n           {(state, makeTable, instance) => {\r\n              return (\r\n                <div>\r\n                  {makeTable()}\r\n                </div>\r\n              )\r\n            }}\r\n          </ReactTable>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n///\r\n/// HTTP GET/POST METHODS\r\n///\r\ngetBox(jobID)\r\n{\r\n    var path = \"http://localhost:52773/csp/BoxTracker\"+jobID\r\n    //TEMPORARY\r\n    //jobID = \"1\"\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(path, requestOptions)\r\n        .then(this.handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n              this.setState({\r\n                  box: response,\r\n              })\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\nhandleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nhandleGetResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n  }\r\n  \r\n\r\nexport default ScanBarcode;\r\n"]},"metadata":{},"sourceType":"module"}