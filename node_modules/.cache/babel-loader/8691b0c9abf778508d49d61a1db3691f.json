{"ast":null,"code":"var _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Components\\\\Charts\\\\BoxLocationsChart.jsx\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\nexport default class LocationChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.params = {};\n    this.state = {\n      stats: [],\n      chart: {}\n    };\n  }\n\n  componentWillMount() {\n    this.getStats();\n  }\n\n  getLocationNums() {\n    this.state.stats.map((data, i) => {\n      let locationNums = [];\n      locationNums[0] = data.LocNums[0];\n      locationNums[1] = data.LocNums[1];\n      locationNums[2] = data.LocNums[2];\n      locationNums[3] = data.LocNums[3];\n      return locationNums;\n    });\n  }\n\n  setChart() {\n    this.setState({\n      chart: {\n        dataBar: {\n          labels: [\"Preparation\", \"Scanning\", \"Quality Control\", \"Dispatch\"],\n          datasets: [{\n            label: \"No. Of Boxes\",\n            data: this.getLocationNums(),\n            backgroundColor: [\"rgba(113, 205, 205,0.4)\", \"rgba(98,  182, 239,0.4)\", \"rgba(255, 177, 101,0.4)\", \"rgba(255, 134,159,0.4)\"],\n            borderWidth: 2,\n            borderColor: [\"rgba(113, 205, 205, 1)\", \"rgba(98,  182, 239, 1)\", \"rgba(255, 177, 101, 1)\", \"rgba(255, 134, 159, 1)\"]\n          }]\n        },\n        barChartOptions: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [{\n              barPercentage: 1,\n              gridLines: {\n                display: true,\n                color: \"rgba(0, 0, 0, 0.1)\"\n              }\n            }],\n            yAxes: [{\n              gridLines: {\n                display: true,\n                color: \"rgba(0, 0, 0, 0.1)\"\n              },\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(MDBContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Number of Boxes Per Step\"), React.createElement(Bar, {\n      data: this.state.chart.dataBar,\n      options: this.state.chart.barChartOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  }\n\n  getStats() {\n    var path = \"http://localhost:52773/BoxTracker/stats\";\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        this.setState({\n          stats: response[1]\n        });\n      }\n\n      return response;\n    });\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Components\\Charts\\BoxLocationsChart.jsx"],"names":["React","Bar","MDBContainer","LocationChart","Component","constructor","props","params","state","stats","chart","componentWillMount","getStats","getLocationNums","map","data","i","locationNums","LocNums","setChart","setState","dataBar","labels","datasets","label","backgroundColor","borderWidth","borderColor","barChartOptions","responsive","maintainAspectRatio","scales","xAxes","barPercentage","gridLines","display","color","yAxes","ticks","beginAtZero","render","path","requestOptions","method","headers","fetch","then","handleGetResponse","response","handleResponse","text","JSON","parse","ok","status","alert","Location","reload","error","message","statusText","Promise","reject"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,UAA7B;AAEA,eAAe,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AACvDC,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,KAAK,EAAC;AAFG,KAAb;AAKH;;AAEDC,EAAAA,kBAAkB,GAClB;AACI,SAAKC,QAAL;AACH;;AACDC,EAAAA,eAAe,GACf;AACI,SAAKL,KAAL,CAAWC,KAAX,CAAiBK,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC9B,UAAIC,YAAY,GAAG,EAAnB;AACAA,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAlB;AACAD,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAlB;AACAD,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAlB;AACAD,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAlB;AACA,aAAOD,YAAP;AACD,KAPH;AASH;;AACDE,EAAAA,QAAQ,GACR;AACI,SAAKC,QAAL,CAAc;AACVV,MAAAA,KAAK,EAAE;AACHW,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,CAAC,aAAD,EAAgB,UAAhB,EAA4B,iBAA5B,EAA+C,UAA/C,CADD;AAEPC,UAAAA,QAAQ,EAAE,CACR;AACEC,YAAAA,KAAK,EAAE,cADT;AAEET,YAAAA,IAAI,EAAE,KAAKF,eAAL,EAFR;AAGEY,YAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,wBAJe,CAHnB;AAUEC,YAAAA,WAAW,EAAE,CAVf;AAWEC,YAAAA,WAAW,EAAE,CACX,wBADW,EAEX,wBAFW,EAGX,wBAHW,EAIX,wBAJW;AAXf,WADQ;AAFH,SADN;AAyBHC,QAAAA,eAAe,EAAE;AACfC,UAAAA,UAAU,EAAE,IADG;AAEfC,UAAAA,mBAAmB,EAAE,KAFN;AAGfC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,CACL;AACEC,cAAAA,aAAa,EAAE,CADjB;AAEEC,cAAAA,SAAS,EAAE;AACTC,gBAAAA,OAAO,EAAE,IADA;AAETC,gBAAAA,KAAK,EAAE;AAFE;AAFb,aADK,CADD;AAUNC,YAAAA,KAAK,EAAE,CACL;AACEH,cAAAA,SAAS,EAAE;AACTC,gBAAAA,OAAO,EAAE,IADA;AAETC,gBAAAA,KAAK,EAAE;AAFE,eADb;AAKEE,cAAAA,KAAK,EAAE;AACLC,gBAAAA,WAAW,EAAE;AADR;AALT,aADK;AAVD;AAHO;AAzBd;AADG,KAAd;AAsDH;;AAIHC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,KAAKhC,KAAL,CAAWE,KAAX,CAAiBW,OAA5B;AAAqC,MAAA,OAAO,EAAE,KAAKb,KAAL,CAAWE,KAAX,CAAiBkB,eAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAEHhB,EAAAA,QAAQ,GACR;AACE,QAAI6B,IAAI,GAAG,yCAAX;AACA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAgB;AAFX;AAFU,KAAvB;AAOA,WAAOC,KAAK,CAACJ,IAAD,EAAOC,cAAP,CAAL,CACFI,IADE,CACG,KAAKC,iBADR,EAEFD,IAFE,CAEGE,QAAQ,IAAI;AACd,UAAIA,QAAJ,EAAc;AACZ,aAAK5B,QAAL,CAAc;AACVX,UAAAA,KAAK,EAAGuC,QAAQ,CAAC,CAAD;AADN,SAAd;AAGD;;AACD,aAAOA,QAAP;AACH,KATE,CAAP;AAUD;;AAEDC,EAAAA,cAAc,CAACD,QAAD,EAAW;AAErB,WAAOA,QAAQ,CAACE,IAAT,GAAgBJ,IAAhB,CAAqBI,IAAI,IAAI;AAChC,YAAMnC,IAAI,GAAGmC,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAArB;;AACA,UAAI,CAACF,QAAQ,CAACK,EAAd,EAAkB;AACd,YAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AACzBC,UAAAA,KAAK,CAAC,aAAD,CAAL,CADyB,CAEzB;;AACAC,UAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AAED,cAAMC,KAAK,GAAI3C,IAAI,IAAIA,IAAI,CAAC4C,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,aAAO3C,IAAP;AACH,KAbM,CAAP;AAcH;;AAEDgC,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AAExB,WAAOA,QAAQ,CAACE,IAAT,GAAgBJ,IAAhB,CAAqBI,IAAI,IAAI;AAChC,YAAMnC,IAAI,GAAGmC,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAArB;;AACA,UAAI,CAACF,QAAQ,CAACK,EAAd,EAAkB;AACd,cAAMK,KAAK,GAAI3C,IAAI,IAAIA,IAAI,CAAC4C,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,aAAO3C,IAAP;AACH,KAPM,CAAP;AAQH;;AAnJ0D","sourcesContent":["import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\nexport default class LocationChart extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.params = {};\r\n        this.state = {\r\n            stats: [],\r\n            chart:{}\r\n        };\r\n      \r\n    }\r\n\r\n    componentWillMount()\r\n    {\r\n        this.getStats()\r\n    }\r\n    getLocationNums()\r\n    {\r\n        this.state.stats.map((data, i) => {\r\n            let locationNums = []\r\n            locationNums[0] = data.LocNums[0]\r\n            locationNums[1] = data.LocNums[1]\r\n            locationNums[2] = data.LocNums[2]\r\n            locationNums[3] = data.LocNums[3]\r\n            return locationNums\r\n          })\r\n          \r\n    }\r\n    setChart()\r\n    {\r\n        this.setState({\r\n            chart: {\r\n                dataBar: {\r\n                  labels: [\"Preparation\", \"Scanning\", \"Quality Control\", \"Dispatch\"],\r\n                  datasets: [\r\n                    {\r\n                      label: \"No. Of Boxes\",\r\n                      data: this.getLocationNums(),\r\n                      backgroundColor: [\r\n                        \"rgba(113, 205, 205,0.4)\",\r\n                        \"rgba(98,  182, 239,0.4)\",\r\n                        \"rgba(255, 177, 101,0.4)\",\r\n                        \"rgba(255, 134,159,0.4)\"\r\n                        \r\n                      ],\r\n                      borderWidth: 2,\r\n                      borderColor: [\r\n                        \"rgba(113, 205, 205, 1)\",\r\n                        \"rgba(98,  182, 239, 1)\",\r\n                        \"rgba(255, 177, 101, 1)\",\r\n                        \"rgba(255, 134, 159, 1)\"\r\n                        \r\n                      ]\r\n                    }\r\n                  ]\r\n                },\r\n                barChartOptions: {\r\n                  responsive: true,\r\n                  maintainAspectRatio: false,\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        barPercentage: 1,\r\n                        gridLines: {\r\n                          display: true,\r\n                          color: \"rgba(0, 0, 0, 0.1)\"\r\n                        }\r\n                      }\r\n                    ],\r\n                    yAxes: [\r\n                      {\r\n                        gridLines: {\r\n                          display: true,\r\n                          color: \"rgba(0, 0, 0, 0.1)\"\r\n                        },\r\n                        ticks: {\r\n                          beginAtZero: true\r\n                        }\r\n                      }\r\n                    ]\r\n                  }\r\n                }\r\n              }\r\n        })\r\n    }\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <MDBContainer>\r\n        <h3 className=\"mt-5\">Number of Boxes Per Step</h3>\r\n        <Bar data={this.state.chart.dataBar} options={this.state.chart.barChartOptions} />\r\n      </MDBContainer>\r\n    );\r\n  }\r\n\r\ngetStats()\r\n{\r\n  var path = \"http://localhost:52773/BoxTracker/stats\"  \r\n  const requestOptions = {\r\n      method: 'GET',\r\n      headers: {\r\n          'content-type': 'application/json',\r\n          'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n          }\r\n      };\r\n  return fetch(path, requestOptions)\r\n      .then(this.handleGetResponse)\r\n      .then(response => {\r\n          if (response) {\r\n            this.setState({\r\n                stats : response[1]\r\n            })\r\n          }\r\n          return response;\r\n      });\r\n}\r\n\r\nhandleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nhandleGetResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}