{"ast":null,"code":"import _extends from \"C:\\\\BoxTracker-React\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Pages\\\\Dashboard.jsx\";\n//core React imports\nimport React, { PureComponent } from 'react';\nimport ReactTable from 'react-table';\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'; //@material-react imports\n\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper'; //App imports\n\nimport Header from \"./../Components/Headers/Header\";\nimport HeaderLinks from \"./../Components/Headers/HeaderLinks\";\nimport ContinueDialogue from './ContinueDialogue'; //css imports\n\nimport \"react-table/react-table.css\";\nimport '../customers.css';\nimport '../Menu.css';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    maxWidth: 500\n  }\n}));\nexport default class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.params = {};\n    this.state = {\n      user: {},\n      boxes: [],\n      avg: [],\n      stepNums: [],\n      stepTimes: [],\n      loading: false,\n      go: false,\n      show: false,\n      isShown: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    //ReactDOM.findDOMNode(this.refs.divFocus).focus();\n    this.getBox();\n    this.getAvg();\n  }\n\n  componentDidUpdate() {}\n\n  handleChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    this.setState({\n      value: \"\",\n      go: true\n    });\n    e.preventDefault();\n  }\n\n  render() {\n    const _this$state = this.state,\n          show = _this$state.show,\n          isShown = _this$state.isShown,\n          boxes = _this$state.boxes,\n          avg = _this$state.avg,\n          stepNums = _this$state.stepNums,\n          stepTimes = _this$state.stepTimes,\n          boxID = _this$state.boxID;\n    const colors = [];\n    const style = {\n      top: 0,\n      left: 350,\n      lineHeight: '24px'\n    };\n    var menuStyle = {\n      margin: 'auto',\n      padding: 40,\n      // width: 700,\n      height: 400,\n      overflow: 'auto'\n    };\n    var customerStyle = {\n      margin: 'auto',\n      padding: 20,\n      overflow: 'auto'\n    };\n\n    const rest = _extends({}, this.props);\n\n    return React.createElement(\"div\", {\n      classname: useStyles.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, show && React.createElement(ContinueDialogue, {\n      onClick: e => {\n        this.setState({\n          show: false\n        });\n        alert(e.currentTarget.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Header, Object.assign({\n      absolute: true,\n      fixed: true,\n      color: \"dark\",\n      brand: \"Box Tracker\",\n      rightLinks: React.createElement(HeaderLinks, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"header\", {\n      className: \"Menu-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Average Job Completion Time:\", avg.map((data, i) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, data.average_job_length);\n    })), React.createElement(Paper, {\n      className: useStyles.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Boxes At Each Workstation\"), React.createElement(BarChart, {\n      width: 500,\n      height: 300,\n      data: [stepNums[4], stepNums[5], stepNums[6], stepNums[7]],\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      dataKey: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(Bar, {\n      dataKey: \"Number of Boxes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, (colors[0] = \"#2b9900\", colors[1] = \"#006399\", colors[2] = \"#e59400\", colors[3] = \"#f00\", stepNums.map((entry, index) => React.createElement(Cell, {\n      key: \"cell-\".concat(index),\n      fill: colors[index],\n      strokeWidth: index === 2 ? 4 : 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Average Time Per Step\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Preparation: \", stepTimes.map((data, i) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, data.Preparation);\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Scanning: \", stepTimes.map((data, i) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, data.Scan);\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Quality Control: \", stepTimes.map((data, i) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, data.Quality_Control);\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Dispatch: \", stepTimes.map((data, i) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, data.Dispatch);\n    }))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Boxes Completed Per Step Per Operator\"), React.createElement(BarChart, {\n      width: 500,\n      height: 300,\n      data: [stepNums[4], stepNums[5], stepNums[6], stepNums[7]],\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      dataKey: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Bar, {\n      dataKey: \"Number of Boxes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, (colors[0] = \"#2b9900\", colors[1] = \"#006399\", colors[2] = \"#e59400\", colors[3] = \"#f00\", stepNums.map((entry, index) => React.createElement(Cell, {\n      key: \"cell-\".concat(index),\n      fill: colors[index],\n      strokeWidth: index === 2 ? 4 : 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))))))))));\n  } ///\n  /// HTTP GET/POST METHODS\n  ///\n\n\n  getBox() {\n    //alert(boxID)\n    //boxID = 6\n    var path = \"http://localhost:52773/BoxTracker/boxes\"; //TEMPORARY\n    //jobID = \"1\"\n\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        //alert(JSON.stringify(response))\n        this.setState({\n          boxes: response\n        });\n      }\n\n      return response;\n    });\n  }\n\n  getAvg() {\n    var path = \"http://localhost:52773/BoxTracker/stats\";\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        alert(JSON.stringify(response[3][4]));\n        this.setState({\n          avg: response,\n          stepNums: response[1],\n          stepTimes: response[2]\n        });\n      }\n\n      return response;\n    });\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Pages\\Dashboard.jsx"],"names":["React","PureComponent","ReactTable","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Toolbar","makeStyles","Grid","Paper","Header","HeaderLinks","ContinueDialogue","useStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","Dashboard","Component","constructor","props","params","state","user","boxes","avg","stepNums","stepTimes","loading","go","show","isShown","handleChange","bind","handleSubmit","componentDidMount","getBox","getAvg","componentDidUpdate","e","setState","value","target","preventDefault","render","boxID","colors","style","top","left","lineHeight","menuStyle","height","overflow","customerStyle","rest","alert","currentTarget","id","map","data","i","average_job_length","right","bottom","entry","index","Preparation","Scan","Quality_Control","Dispatch","path","requestOptions","method","headers","fetch","then","handleGetResponse","response","JSON","stringify","handleResponse","text","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SACEC,QADF,EACYC,GADZ,EACiBC,IADjB,EACuBC,KADvB,EAC8BC,KAD9B,EACqCC,aADrC,EACoDC,OADpD,EAC6DC,MAD7D,QAC2E,UAD3E,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CACA;;AACA,OAAO,6BAAP;AACA,OAAO,kBAAP;AACA,OAAO,aAAP;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAACO,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GAD+B;AAIrCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,CADJ;AAELC,IAAAA,MAAM,EAAE,MAFH;AAGLC,IAAAA,QAAQ,EAAE;AAHL;AAJ8B,CAAL,CAAN,CAA5B;AAWA,eAAe,MAAMC,SAAN,SAAwB3B,KAAK,CAAC4B,SAA9B,CAAwC;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,GAAG,EAAE,EAHM;AAIXC,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,SAAS,EAAE,EALA;AAMXC,MAAAA,OAAO,EAAE,KANE;AAOXC,MAAAA,EAAE,EAAE,KAPO;AAQXC,MAAAA,IAAI,EAAE,KARK;AASXC,MAAAA,OAAO,EAAE;AATE,KAAb;AAWA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AAED;;AACDE,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,MAAL;AACA,SAAKC,MAAL;AACD;;AAEDC,EAAAA,kBAAkB,GAAG,CACpB;;AAEDN,EAAAA,YAAY,CAACO,CAAD,EAAI;AACd,SAAKC,QAAL,CAAc;AAAEC,MAAAA,KAAK,EAAEF,CAAC,CAACG,MAAF,CAASD;AAAlB,KAAd;AACD;;AAEDP,EAAAA,YAAY,CAACK,CAAD,EAAI;AACd,SAAKC,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAE,EADK;AAEZZ,MAAAA,EAAE,EAAE;AAFQ,KAAd;AAIAU,IAAAA,CAAC,CAACI,cAAF;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBAC2D,KAAKtB,KADhE;AAAA,UACCQ,IADD,eACCA,IADD;AAAA,UACOC,OADP,eACOA,OADP;AAAA,UACgBP,KADhB,eACgBA,KADhB;AAAA,UACuBC,GADvB,eACuBA,GADvB;AAAA,UAC4BC,QAD5B,eAC4BA,QAD5B;AAAA,UACsCC,SADtC,eACsCA,SADtC;AAAA,UACiDkB,KADjD,eACiDA,KADjD;AAEP,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,KAAK,GAAG;AACZC,MAAAA,GAAG,EAAE,CADO;AAEZC,MAAAA,IAAI,EAAE,GAFM;AAGZC,MAAAA,UAAU,EAAE;AAHA,KAAd;AAKA,QAAIC,SAAS,GAAG;AACdpC,MAAAA,MAAM,EAAE,MADM;AAEdF,MAAAA,OAAO,EAAE,EAFK;AAGd;AACAuC,MAAAA,MAAM,EAAE,GAJM;AAKdC,MAAAA,QAAQ,EAAE;AALI,KAAhB;AAOA,QAAIC,aAAa,GAAG;AAClBvC,MAAAA,MAAM,EAAE,MADU;AAElBF,MAAAA,OAAO,EAAE,EAFS;AAGlBwC,MAAAA,QAAQ,EAAE;AAHQ,KAApB;;AAfO,UAoBIE,IApBJ,gBAoBa,KAAKnC,KApBlB;;AAqBP,WACE;AAAK,MAAA,SAAS,EAAEZ,SAAS,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGoB,IAAI,IAAI,oBAAC,gBAAD;AAAkB,MAAA,OAAO,EAAGS,CAAD,IAAO;AACzC,aAAKC,QAAL,CAAc;AAAEV,UAAAA,IAAI,EAAE;AAAR,SAAd;AACA0B,QAAAA,KAAK,CAACjB,CAAC,CAACkB,aAAF,CAAgBC,EAAjB,CAAL;AACD,OAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADX,EAKE,oBAAC,MAAD;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,KAAK,EAAC,aAJR;AAKE,MAAA,UAAU,EAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALd,OAMMH,IANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OALF,EAaE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAcE;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAdF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACG9B,GAAG,CAACkC,GAAJ,CAAQ,CAACC,IAAD,EAAOC,CAAP,KAAa;AACpB,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,IAAI,CAACE,kBADR,CADF;AAKD,KANA,CADH,CAfF,EAyBE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEtD,SAAS,CAACI,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE,oBAAC,QAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,IAAI,EAAE,CAACc,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAtB,EAA2BA,QAAQ,CAAC,CAAD,CAAnC,EAAwCA,QAAQ,CAAC,CAAD,CAAhD,CAHR;AAIE,MAAA,MAAM,EAAE;AACNsB,QAAAA,GAAG,EAAE,CADC;AACEe,QAAAA,KAAK,EAAE,EADT;AACad,QAAAA,IAAI,EAAE,EADnB;AACuBe,QAAAA,MAAM,EAAE;AAD/B,OAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAWE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAYE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAaE,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAGIlB,MAAM,CAAC,CAAD,CAAN,GAAY,SAAZ,EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,SADZ,EAEAA,MAAM,CAAC,CAAD,CAAN,GAAY,SAFZ,EAGAA,MAAM,CAAC,CAAD,CAAN,GAAY,MAHZ,EAIApB,QAAQ,CAACiC,GAAT,CAAa,CAACM,KAAD,EAAQC,KAAR,KACX,oBAAC,IAAD;AAAM,MAAA,GAAG,iBAAUA,KAAV,CAAT;AAA4B,MAAA,IAAI,EAAEpB,MAAM,CAACoB,KAAD,CAAxC;AAAkD,MAAA,WAAW,EAAEA,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPJ,EAbF,CAFF,CADF,EA8BE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAiBvC,SAAS,CAACgC,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AAAC,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMD,IAAI,CAACO,WAAX,CAAR;AAAuC,KAAnE,CAAjB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAcxC,SAAS,CAACgC,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AAAC,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMD,IAAI,CAACQ,IAAX,CAAR;AAAgC,KAA5D,CAAd,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqBzC,SAAS,CAACgC,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AAAC,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMD,IAAI,CAACS,eAAX,CAAR;AAA2C,KAAvE,CAArB,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAc1C,SAAS,CAACgC,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AAAC,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMD,IAAI,CAACU,QAAX,CAAR;AAAoC,KAAhE,CAAd,CALF,CA9BF,EAqCE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CADA,EAEE,oBAAC,QAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,IAAI,EAAE,CAAC5C,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAtB,EAA2BA,QAAQ,CAAC,CAAD,CAAnC,EAAwCA,QAAQ,CAAC,CAAD,CAAhD,CAHR;AAIE,MAAA,MAAM,EAAE;AACNsB,QAAAA,GAAG,EAAE,CADC;AACEe,QAAAA,KAAK,EAAE,EADT;AACad,QAAAA,IAAI,EAAE,EADnB;AACuBe,QAAAA,MAAM,EAAE;AAD/B,OAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAWE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAYE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAaE,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAGIlB,MAAM,CAAC,CAAD,CAAN,GAAY,SAAZ,EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,SADZ,EAEAA,MAAM,CAAC,CAAD,CAAN,GAAY,SAFZ,EAGAA,MAAM,CAAC,CAAD,CAAN,GAAY,MAHZ,EAIApB,QAAQ,CAACiC,GAAT,CAAa,CAACM,KAAD,EAAQC,KAAR,KACX,oBAAC,IAAD;AAAM,MAAA,GAAG,iBAAUA,KAAV,CAAT;AAA4B,MAAA,IAAI,EAAEpB,MAAM,CAACoB,KAAD,CAAxC;AAAkD,MAAA,WAAW,EAAEA,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPJ,EAbF,CAFF,CArCF,CADF,CAzBF,CADF,CADF;AAoGD,GAlKoD,CAmKrD;AACA;AACA;;;AACA9B,EAAAA,MAAM,GAAG;AACP;AACA;AACA,QAAImC,IAAI,GAAG,yCAAX,CAHO,CAIP;AACA;;AACA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,KADa;AAErBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAiB;AAFV;AAFY,KAAvB;AAOA,WAAOC,KAAK,CAACJ,IAAD,EAAOC,cAAP,CAAL,CACJI,IADI,CACC,KAAKC,iBADN,EAEJD,IAFI,CAECE,QAAQ,IAAI;AAChB,UAAIA,QAAJ,EAAc;AACZ;AACA,aAAKtC,QAAL,CAAc;AACZhB,UAAAA,KAAK,EAAEsD;AADK,SAAd;AAGD;;AACD,aAAOA,QAAP;AACD,KAVI,CAAP;AAWD;;AAEDzC,EAAAA,MAAM,GAAG;AACP,QAAIkC,IAAI,GAAG,yCAAX;AACA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,KADa;AAErBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAiB;AAFV;AAFY,KAAvB;AAOA,WAAOC,KAAK,CAACJ,IAAD,EAAOC,cAAP,CAAL,CACJI,IADI,CACC,KAAKC,iBADN,EAEJD,IAFI,CAECE,QAAQ,IAAI;AAChB,UAAIA,QAAJ,EAAc;AACZtB,QAAAA,KAAK,CAACuB,IAAI,CAACC,SAAL,CAAeF,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAf,CAAD,CAAL;AACA,aAAKtC,QAAL,CAAc;AACZf,UAAAA,GAAG,EAAEqD,QADO;AAEZpD,UAAAA,QAAQ,EAAEoD,QAAQ,CAAC,CAAD,CAFN;AAGZnD,UAAAA,SAAS,EAAEmD,QAAQ,CAAC,CAAD;AAHP,SAAd;AAKD;;AACD,aAAOA,QAAP;AACD,KAZI,CAAP;AAaD;;AAEDG,EAAAA,cAAc,CAACH,QAAD,EAAW;AAEvB,WAAOA,QAAQ,CAACI,IAAT,GAAgBN,IAAhB,CAAqBM,IAAI,IAAI;AAClC,YAAMtB,IAAI,GAAGsB,IAAI,IAAIH,IAAI,CAACI,KAAL,CAAWD,IAAX,CAArB;;AACA,UAAI,CAACJ,QAAQ,CAACM,EAAd,EAAkB;AAChB,YAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B7B,UAAAA,KAAK,CAAC,aAAD,CAAL,CAD2B,CAE3B;;AACA8B,UAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACD;;AAED,cAAMC,KAAK,GAAI5B,IAAI,IAAIA,IAAI,CAAC6B,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AACD,aAAO5B,IAAP;AACD,KAbM,CAAP;AAcD;;AAEDiB,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AAE1B,WAAOA,QAAQ,CAACI,IAAT,GAAgBN,IAAhB,CAAqBM,IAAI,IAAI;AAClC,YAAMtB,IAAI,GAAGsB,IAAI,IAAIH,IAAI,CAACI,KAAL,CAAWD,IAAX,CAArB;;AACA,UAAI,CAACJ,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAMI,KAAK,GAAI5B,IAAI,IAAIA,IAAI,CAAC6B,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AACD,aAAO5B,IAAP;AACD,KAPM,CAAP;AAQD;;AApPoD","sourcesContent":["//core React imports\r\nimport React, { PureComponent } from 'react';\r\nimport ReactTable from 'react-table';\r\nimport {\r\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n//@material-react imports\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n//App imports\r\nimport Header from \"./../Components/Headers/Header\";\r\nimport HeaderLinks from \"./../Components/Headers/HeaderLinks\";\r\nimport ContinueDialogue from './ContinueDialogue';\r\n//css imports\r\nimport \"react-table/react-table.css\";\r\nimport '../customers.css';\r\nimport '../Menu.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    maxWidth: 500,\r\n  }\r\n}))\r\n\r\nexport default class Dashboard extends React.Component {\r\n  constructor(props) {\r\n\r\n    super(props);\r\n    this.params = {};\r\n    this.state = {\r\n      user: {},\r\n      boxes: [],\r\n      avg: [],\r\n      stepNums: [],\r\n      stepTimes: [],\r\n      loading: false,\r\n      go: false,\r\n      show: false,\r\n      isShown: false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n  componentDidMount() {\r\n    //ReactDOM.findDOMNode(this.refs.divFocus).focus();\r\n    this.getBox()\r\n    this.getAvg()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ value: e.target.value });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    this.setState({\r\n      value: \"\",\r\n      go: true\r\n    })\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { show, isShown, boxes, avg, stepNums, stepTimes, boxID } = this.state\r\n    const colors = []\r\n    const style = {\r\n      top: 0,\r\n      left: 350,\r\n      lineHeight: '24px',\r\n    };\r\n    var menuStyle = {\r\n      margin: 'auto',\r\n      padding: 40,\r\n      // width: 700,\r\n      height: 400,\r\n      overflow: 'auto',\r\n    };\r\n    var customerStyle = {\r\n      margin: 'auto',\r\n      padding: 20,\r\n      overflow: 'auto',\r\n    };\r\n    const { ...rest } = this.props;\r\n    return (\r\n      <div classname={useStyles.root}>\r\n        <div className=\"Menu\">\r\n          {show && <ContinueDialogue onClick={(e) => {\r\n            this.setState({ show: false })\r\n            alert(e.currentTarget.id)\r\n          }} />}\r\n          <Header\r\n            absolute\r\n            fixed\r\n            color=\"dark\"\r\n            brand=\"Box Tracker\"\r\n            rightLinks={<HeaderLinks />}\r\n            {...rest}\r\n          />\r\n          <Toolbar />\r\n          <header className=\"Menu-header\">Dashboard</header>\r\n          <h2>Average Job Completion Time: \r\n            {avg.map((data, i) => {\r\n              return (\r\n                <div>\r\n                  {data.average_job_length}\r\n                </div>\r\n              )\r\n            })\r\n            }\r\n            </h2>\r\n          <Paper className={useStyles.paper}>\r\n            <Grid container justify={\"center\"}>\r\n              <Grid>\r\n                <h2>Boxes At Each Workstation</h2>\r\n                <BarChart\r\n                  width={500}\r\n                  height={300}\r\n                  data={[stepNums[4], stepNums[5], stepNums[6], stepNums[7]]}\r\n                  margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                  }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"name\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Legend />\r\n                  <Bar dataKey=\"Number of Boxes\">\r\n                    {\r\n                      \r\n                      colors[0] = \"#2b9900\",\r\n                      colors[1] = \"#006399\",\r\n                      colors[2] = \"#e59400\",\r\n                      colors[3] = \"#f00\",\r\n                      stepNums.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={colors[index]}  strokeWidth={index === 2 ? 4 : 1}/>\r\n                      ))\r\n                    }\r\n                  </Bar>\r\n                </BarChart>\r\n              </Grid>\r\n              <Grid item>\r\n                <h2>Average Time Per Step</h2>\r\n                <p>Preparation: {stepTimes.map((data, i) => {return (<div>{data.Preparation}</div>)})}</p>\r\n                <p>Scanning: {stepTimes.map((data, i) => {return (<div>{data.Scan}</div>)})}</p>\r\n                <p>Quality Control: {stepTimes.map((data, i) => {return (<div>{data.Quality_Control}</div>)})}</p>\r\n                <p>Dispatch: {stepTimes.map((data, i) => {return (<div>{data.Dispatch}</div>)})}</p>\r\n              </Grid>\r\n              <Grid item>\r\n              <h2>Boxes Completed Per Step Per Operator</h2>\r\n                <BarChart\r\n                  width={500}\r\n                  height={300}\r\n                  data={[stepNums[4], stepNums[5], stepNums[6], stepNums[7]]}\r\n                  margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                  }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"name\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Legend />\r\n                  <Bar dataKey=\"Number of Boxes\">\r\n                    {\r\n                      \r\n                      colors[0] = \"#2b9900\",\r\n                      colors[1] = \"#006399\",\r\n                      colors[2] = \"#e59400\",\r\n                      colors[3] = \"#f00\",\r\n                      stepNums.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={colors[index]}  strokeWidth={index === 2 ? 4 : 1}/>\r\n                      ))\r\n                    }\r\n                  </Bar>\r\n                </BarChart>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  ///\r\n  /// HTTP GET/POST METHODS\r\n  ///\r\n  getBox() {\r\n    //alert(boxID)\r\n    //boxID = 6\r\n    var path = \"http://localhost:52773/BoxTracker/boxes\"\r\n    //TEMPORARY\r\n    //jobID = \"1\"\r\n    const requestOptions = {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M=',\r\n      }\r\n    };\r\n    return fetch(path, requestOptions)\r\n      .then(this.handleGetResponse)\r\n      .then(response => {\r\n        if (response) {\r\n          //alert(JSON.stringify(response))\r\n          this.setState({\r\n            boxes: response\r\n          })\r\n        }\r\n        return response;\r\n      });\r\n  }\r\n\r\n  getAvg() {\r\n    var path = \"http://localhost:52773/BoxTracker/stats\"\r\n    const requestOptions = {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M=',\r\n      }\r\n    };\r\n    return fetch(path, requestOptions)\r\n      .then(this.handleGetResponse)\r\n      .then(response => {\r\n        if (response) {\r\n          alert(JSON.stringify(response[3][4]))\r\n          this.setState({\r\n            avg: response,\r\n            stepNums: response[1],\r\n            stepTimes: response[2]\r\n          })\r\n        }\r\n        return response;\r\n      });\r\n  }\r\n\r\n  handleResponse(response) {\r\n\r\n    return response.text().then(text => {\r\n      const data = text && JSON.parse(text);\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          alert(\"not OK, 401\")\r\n          // auto logout if 401 response returned from api\r\n          Location.reload(true);\r\n        }\r\n\r\n        const error = (data && data.message) || response.statusText;\r\n        return Promise.reject(error);\r\n      }\r\n      return data;\r\n    });\r\n  }\r\n\r\n  handleGetResponse(response) {\r\n\r\n    return response.text().then(text => {\r\n      const data = text && JSON.parse(text);\r\n      if (!response.ok) {\r\n        const error = (data && data.message) || response.statusText;\r\n        return Promise.reject(error);\r\n      }\r\n      return data;\r\n    });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}