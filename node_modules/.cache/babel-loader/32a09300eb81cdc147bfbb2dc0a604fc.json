{"ast":null,"code":"var _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Pages\\\\Preparation.jsx\";\nimport React from 'react';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\nimport '../customers.css';\nimport '../Menu.css';\nimport ConfirmDialogue from './ConfirmDialogue';\n\nclass Preparation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.params = {};\n    this.state = {\n      user: {},\n      box: [],\n      boxID: \"\",\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } //called first time component loads\n\n\n  componentDidMount() {\n    this.getBox(this.props.match.params.id);\n  } //called when input changed\n\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  } //called when input submitted\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n  }\n  /*\r\n    Used to transform JSON from a format suitable for a borizontal table\r\n    to a format suitable for a vertical table\r\n  */\n\n\n  getVertical(vBox) {\n    let newBox = [];\n    vBox.map((data, i) => {\n      this.setState({\n        boxID: data.box_id\n      });\n      newBox = [{\n        \"Property\": \"Box ID\",\n        \"Value\": data.box_id\n      }, {\n        \"Property\": \"Job ID\",\n        \"Value\": data.job_id\n      }, {\n        \"Property\": \"Customer\",\n        \"Value\": data.customer_name\n      }, {\n        \"Property\": \"Location\",\n        \"Value\": data.box_location\n      }, {\n        \"Property\": \"Operator\",\n        \"Value\": data.box_operator\n      }, {\n        \"Property\": \"State\",\n        \"Value\": data.box_state\n      }, {\n        \"Property\": \"Step\",\n        \"Value\": data.box_step\n      }, {\n        \"Property\": \"Dispatch\",\n        \"Value\": data.job_dispatch\n      }];\n    });\n    return newBox;\n  } //renders component on webpage\n\n\n  render() {\n    const _this$state = this.state,\n          vBox = _this$state.vBox,\n          boxID = _this$state.boxID,\n          loading = _this$state.loading;\n    var menuStyle = {\n      margin: 'auto',\n      padding: 40,\n      // width: 700,\n      height: 400,\n      overflow: 'auto'\n    };\n    var customerStyle = {\n      margin: 'auto',\n      padding: 20,\n      overflow: 'auto'\n    };\n    return React.createElement(\"div\", {\n      className: \"MenuPrep\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"Menu-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Box Tracker\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Preparation\")), React.createElement(ReactTable, {\n      data: vBox,\n      columns: [{\n        Header: \"Box\",\n        columns: [{\n          accessor: \"Property\"\n        }, {\n          accessor: \"Value\"\n        }]\n      }],\n      defaultPageSize: 8,\n      showPagination: false,\n      className: \"-striped -highlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, (state, makeTable, instance) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, makeTable());\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(ConfirmDialogue, {\n      onClick: () => this.completeStep(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })));\n  }\n  /*\r\n    HTTP GET/POST METHODS\r\n  */\n  //gets a single box by box ID\n\n\n  getBox(boxID) {\n    if (boxID == \"$36\") {\n      boxID = 6;\n    }\n\n    var path = \"http://localhost:52773/BoxTracker/boxes/\" + boxID;\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        let vBox = this.getVertical(response);\n        this.setState({\n          vBox: vBox,\n          box: response\n        });\n      }\n\n      return response;\n    });\n  }\n  /*\r\n    Called when user presses \"completed\", and then 'yes' on the 'Are You Sure' dialogue.\r\n    Updates task status and box details.\r\n  */\n\n\n  completeStep() {\n    var path = \"http://localhost:52773/BoxTracker/task\";\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      },\n      body: JSON.stringify({\n        'box_id': this.state.boxID,\n        'task_action': \"Completed\",\n        'box_location': \"Workstation\",\n        \"box_operator\": localStorage.getItem(\"operator_id\"),\n        \"box_step\": \"Scanning\"\n      })\n    };\n    return fetch(path, requestOptions).then(this.handleResponse).then(response => {\n      if (response) {\n        alert(\"Completed\");\n        var path = \"/box\";\n        this.props.history.push(path);\n      }\n\n      return response;\n    });\n  } //handles response from POST HTTP requests\n\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  } //handles response from GET HTTP requests\n\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}\n\nexport default Preparation;","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Pages\\Preparation.jsx"],"names":["React","ReactTable","ConfirmDialogue","Preparation","Component","constructor","props","params","state","user","box","boxID","loading","handleChange","bind","handleSubmit","componentDidMount","getBox","match","id","e","target","name","value","setState","preventDefault","getVertical","vBox","newBox","map","data","i","box_id","job_id","customer_name","box_location","box_operator","box_state","box_step","job_dispatch","render","menuStyle","margin","padding","height","overflow","customerStyle","Header","columns","accessor","makeTable","instance","completeStep","path","requestOptions","method","headers","fetch","then","handleGetResponse","response","body","JSON","stringify","localStorage","getItem","handleResponse","alert","history","push","text","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport '../customers.css';\r\nimport '../Menu.css';\r\nimport ConfirmDialogue from './ConfirmDialogue';\r\n\r\nclass Preparation extends React.Component{\r\n  constructor(props)\r\n  {\r\n      super(props);\r\n      this.params = {};\r\n      this.state = {\r\n          user: {},\r\n          box: [],\r\n          boxID: \"\",\r\n          loading: false\r\n      };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //called first time component loads\r\n  componentDidMount()\r\n  {\r\n      this.getBox(this.props.match.params.id)\r\n  }\r\n\r\n  //called when input changed\r\n  handleChange(e) \r\n    {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n  //called when input submitted\r\n  handleSubmit(e)\r\n  {\r\n    e.preventDefault();\r\n  }\r\n  \r\n  /*\r\n    Used to transform JSON from a format suitable for a borizontal table\r\n    to a format suitable for a vertical table\r\n  */ \r\n  getVertical(vBox)\r\n  {\r\n    let newBox = []\r\n    vBox.map((data, i) => {\r\n        this.setState({boxID: data.box_id})\r\n        newBox = [\r\n            {\"Property\": \"Box ID\",\r\n             \"Value\": data.box_id},\r\n             {\"Property\": \"Job ID\",\r\n             \"Value\": data.job_id},\r\n             {\"Property\": \"Customer\",\r\n             \"Value\": data.customer_name},\r\n             {\"Property\": \"Location\",\r\n             \"Value\": data.box_location},\r\n             {\"Property\": \"Operator\",\r\n             \"Value\": data.box_operator},\r\n             {\"Property\": \"State\",\r\n             \"Value\": data.box_state},\r\n             {\"Property\": \"Step\",\r\n             \"Value\": data.box_step},\r\n             {\"Property\": \"Dispatch\",\r\n             \"Value\": data.job_dispatch}\r\n        ]\r\n    })\r\n    return newBox\r\n  }\r\n\r\n  //renders component on webpage\r\n  render(){\r\n    const { vBox, boxID, loading} = this.state\r\n    var menuStyle = {\r\n      margin: 'auto',\r\n      padding: 40,\r\n     // width: 700,\r\n      height: 400,\r\n      overflow: 'auto',\r\n    };\r\n    var customerStyle = {\r\n        margin: 'auto',\r\n        padding: 20,\r\n        overflow: 'auto',\r\n      };\r\n    \r\n    return (\r\n        \r\n        <div className=\"MenuPrep\">\r\n            <header className=\"Menu-header\">\r\n            <h1>Box Tracker</h1>\r\n            <p>Preparation</p>\r\n          </header>\r\n          <ReactTable \r\n          data={vBox}\r\n          columns={[\r\n            {\r\n              Header: \"Box\",\r\n              columns: [\r\n                {\r\n                  accessor: \"Property\"\r\n                },\r\n                {\r\n                  accessor: \"Value\"\r\n                }\r\n              ]\r\n            }\r\n          ]}\r\n          defaultPageSize={8}\r\n          showPagination = {false}\r\n          className=\"-striped -highlight\"\r\n        >\r\n           {(state, makeTable, instance) => {\r\n              return (\r\n                <div>\r\n                  {makeTable()}\r\n                </div>\r\n              )\r\n            }}\r\n          </ReactTable>\r\n          <div>\r\n              <ConfirmDialogue onClick={()=>this.completeStep()}/>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n/*\r\n  HTTP GET/POST METHODS\r\n*/\r\n\r\n//gets a single box by box ID\r\ngetBox(boxID)\r\n{\r\n    if(boxID==\"$36\"){boxID=6}\r\n    var path = \"http://localhost:52773/BoxTracker/boxes/\"+boxID\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n    return fetch(path, requestOptions)\r\n        .then(this.handleGetResponse)\r\n        .then(response => {\r\n            if (response) {\r\n              let vBox = this.getVertical(response)\r\n              this.setState({\r\n                  vBox : vBox,\r\n                  box : response\r\n              })\r\n            }\r\n            return response;\r\n        });\r\n}\r\n\r\n/*\r\n  Called when user presses \"completed\", and then 'yes' on the 'Are You Sure' dialogue.\r\n  Updates task status and box details.\r\n*/\r\ncompleteStep()\r\n{\r\n\r\n  var path = \"http://localhost:52773/BoxTracker/task\"\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            },\r\n        body: JSON.stringify({'box_id': this.state.boxID, 'task_action': \"Completed\", 'box_location': \"Workstation\", \"box_operator\": localStorage.getItem(\"operator_id\"), \"box_step\":\"Scanning\"})\r\n        };\r\n    return fetch(path, requestOptions)\r\n    .then(this.handleResponse).then(response => {\r\n            if(response)\r\n            {   \r\n              alert(\"Completed\")\r\n              var path = \"/box\"\r\n              this.props.history.push(path);\r\n            }\r\n            return response;\r\n        }\r\n    )\r\n}\r\n\r\n//handles response from POST HTTP requests\r\nhandleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\n//handles response from GET HTTP requests\r\nhandleGetResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n  }\r\n  \r\n\r\nexport default Preparation;\r\n"]},"metadata":{},"sourceType":"module"}