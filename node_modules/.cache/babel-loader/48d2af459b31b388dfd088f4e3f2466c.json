{"ast":null,"code":"import React from 'react';\n\nclass customerService extends React.Component {\n  addCustomer(customer_name) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      },\n      body: JSON.stringify({\n        'customer_name': customer_name\n      })\n    };\n    return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions).then(handleResponse).then(response => {\n      if (response) {\n        alert(\"Customer Successfully Created\");\n      }\n\n      return response;\n    });\n  }\n\n  getCustomers() {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions).then(handleGetResponse).then(response => {\n      if (response) {\n        localStorage.setItem('customers', JSON.stringify(response));\n      }\n\n      return response;\n    });\n  }\n\n  getCustomerByID(customerID) {\n    var path = \"http://localhost:52773/csp/BoxTracker\" + customerID;\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(handleGetResponse).then(response => {\n      if (response) {\n        let CustomerReturn = JSON.parse(JSON.stringify(response));\n        let CustomerDetails = JSON.stringify(CustomerReturn[0]);\n        let CustomerJobs = JSON.stringify(CustomerReturn[1]);\n        this.setState({\n          customer: CustomerDetails,\n          customerJobs: CustomerJobs\n        }); //localStorage.setItem('customer', CustomerDetails);\n        //localStorage.setItem('customerJobs', CustomerJobs)\n      }\n\n      return response;\n    });\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}\n\nexport default customerService;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\Services\\customerService.js"],"names":["React","customerService","Component","addCustomer","customer_name","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","response","alert","getCustomers","handleGetResponse","localStorage","setItem","getCustomerByID","customerID","path","CustomerReturn","parse","CustomerDetails","CustomerJobs","setState","customer","customerJobs","text","data","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import React from 'react';\r\nclass customerService extends React.Component{\r\n    addCustomer(customer_name)\r\n    {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n                },\r\n            body: JSON.stringify({'customer_name': customer_name})\r\n            };\r\n        return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions)\r\n        .then(handleResponse).then(response => {\r\n                if(response)\r\n                {   \r\n                    alert(\"Customer Successfully Created\")\r\n                }\r\n                return response;\r\n            }\r\n        )\r\n            \r\n    }\r\n    \r\n    getCustomers()\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n                }\r\n            };\r\n        return fetch(\"http://localhost:52773/csp/BoxTracker/customers\", requestOptions)\r\n            .then(handleGetResponse)\r\n            .then(response => {\r\n                if (response) {\r\n                    localStorage.setItem('customers', JSON.stringify(response));\r\n                }\r\n                return response;\r\n            });\r\n    }\r\n    \r\n    getCustomerByID(customerID)\r\n    {\r\n        var path = \"http://localhost:52773/csp/BoxTracker\"+customerID\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n                }\r\n            };\r\n        return fetch(path, requestOptions)\r\n            .then(handleGetResponse)\r\n            .then(response => {\r\n                if (response) {\r\n                    let CustomerReturn = JSON.parse(JSON.stringify(response))\r\n                    let CustomerDetails = JSON.stringify(CustomerReturn[0])\r\n                    let CustomerJobs = JSON.stringify(CustomerReturn[1])\r\n                    this.setState({\r\n                        customer: CustomerDetails,\r\n                        customerJobs: CustomerJobs})\r\n                    //localStorage.setItem('customer', CustomerDetails);\r\n                    //localStorage.setItem('customerJobs', CustomerJobs)\r\n                }\r\n                return response;\r\n            });\r\n    }\r\n    \r\n    handleResponse(response) {\r\n        \r\n        return response.text().then(text => {\r\n            const data = text && JSON.parse(text);\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    alert(\"not OK, 401\")\r\n                    // auto logout if 401 response returned from api\r\n                    Location.reload(true);\r\n                }\r\n    \r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n            return data;\r\n        });\r\n    }\r\n    \r\n    handleGetResponse(response) {\r\n        \r\n        return response.text().then(text => {\r\n            const data = text && JSON.parse(text);\r\n            if (!response.ok) {\r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n            return data;\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default customerService;"]},"metadata":{},"sourceType":"module"}