{"ast":null,"code":"var React = require('react');\n\nvar $ = React.DOM; // Some shared attrs for JsonTable and JsonRow\n\nvar defaultSettings = {\n  header: true,\n  noRowsMessage: 'No items',\n  classPrefix: 'json'\n},\n    getSetting = function (name) {\n  var settings = this.props.settings;\n  if (!settings || typeof settings[name] == 'undefined') return defaultSettings[name];\n  return settings[name];\n};\n\nvar JsonTable = React.createClass({\n  getSetting: getSetting,\n  render: function () {\n    var cols = this.normalizeColumns(),\n        contents = [this.renderRows(cols)];\n    if (this.getSetting('header')) contents.unshift(this.renderHeader(cols));\n    var tableClass = this.props.className || this.getSetting('classPrefix') + 'Table';\n    return $.table({\n      className: tableClass\n    }, contents);\n  },\n  renderHeader: function (cols) {\n    var me = this,\n        prefix = this.getSetting('classPrefix'),\n        headerClass = this.getSetting('headerClass'),\n        cells = cols.map(function (col) {\n      var className = prefix + 'Column';\n      if (headerClass) className = headerClass(className, col.key);\n      return $.th({\n        className: className,\n        key: col.key,\n        onClick: me.onClickHeader,\n        \"data-key\": col.key\n      }, col.label);\n    });\n    return $.thead({\n      key: 'th'\n    }, $.tr({\n      className: prefix + 'Header'\n    }, cells));\n  },\n  renderRows: function (cols) {\n    var me = this,\n        items = this.props.rows,\n        settings = this.props.settings || {},\n        i = 1;\n    if (!items || !items.length) return $.tbody({\n      key: 'body'\n    }, [$.tr({\n      key: 'row'\n    }, $.td({\n      key: 'column'\n    }, this.getSetting('noRowsMessage')))]);\n    var rows = items.map(function (item) {\n      var key = me.getKey(item, i);\n      return React.createElement(Row, {\n        key: key,\n        reactKey: key,\n        item: item,\n        settings: settings,\n        columns: cols,\n        i: i++,\n        onClickRow: me.onClickRow,\n        onClickCell: me.onClickCell\n      });\n    });\n    return $.tbody({\n      key: 'body'\n    }, rows);\n  },\n  getItemField: function (item, field) {\n    return item[field];\n  },\n  normalizeColumns: function () {\n    var getItemField = this.props.cellRenderer || this.getItemField,\n        cols = this.props.columns,\n        items = this.props.rows;\n\n    if (!cols) {\n      if (!items || !items.length) return [];\n      return Object.keys(items[0]).map(function (key) {\n        return {\n          key: key,\n          label: key,\n          cell: getItemField\n        };\n      });\n    }\n\n    return cols.map(function (col) {\n      var key;\n\n      if (typeof col == 'string') {\n        return {\n          key: col,\n          label: col,\n          cell: getItemField\n        };\n      }\n\n      if (typeof col == 'object') {\n        key = col.key || col.label; // This is about get default column definition\n        // we use label as key if not defined\n        // we use key as label if not defined\n        // we use getItemField as cell function if not defined\n\n        return {\n          key: key,\n          label: col.label || key,\n          cell: col.cell || getItemField\n        };\n      }\n\n      return {\n        key: 'unknown',\n        name: 'unknown',\n        cell: 'Unknown'\n      };\n    });\n  },\n  getKey: function (item, i) {\n    var field = this.props.settings && this.props.settings.keyField;\n    if (field && item[field]) return item[field];\n    if (item.id) return item.id;\n    if (item._id) return item._id;\n    return i;\n  },\n  shouldComponentUpdate: function () {\n    return true;\n  },\n  onClickRow: function (e, item) {\n    if (this.props.onClickRow) {\n      this.props.onClickRow(e, item);\n    }\n  },\n  onClickHeader: function (e) {\n    if (this.props.onClickHeader) {\n      this.props.onClickHeader(e, e.target.dataset.key);\n    }\n  },\n  onClickCell: function (e, key, item) {\n    if (this.props.onClickCell) {\n      this.props.onClickCell(e, key, item);\n    }\n  }\n});\nvar Row = React.createClass({\n  getSetting: getSetting,\n  render: function () {\n    var me = this,\n        props = this.props,\n        cellClass = this.getSetting('cellClass'),\n        rowClass = this.getSetting('rowClass'),\n        prefix = this.getSetting('classPrefix'),\n        cells = props.columns.map(function (col) {\n      var content = col.cell,\n          key = col.key,\n          className = prefix + 'Cell ' + prefix + 'Cell_' + key;\n      if (cellClass) className = cellClass(className, key, props.item);\n      if (typeof content == 'function') content = content(props.item, key);\n      return $.td({\n        className: className,\n        key: key,\n        \"data-key\": key,\n        onClick: me.onClickCell\n      }, content);\n    });\n    var className = prefix + 'Row ' + prefix + (props.i % 2 ? 'Odd' : 'Even');\n    if (props.reactKey) className += ' ' + prefix + 'Row_' + props.reactKey;\n    if (rowClass) className = rowClass(className, props.item);\n    return $.tr({\n      className: className,\n      onClick: me.onClickRow,\n      key: this.props.reactKey\n    }, cells);\n  },\n  onClickCell: function (e) {\n    this.props.onClickCell(e, e.target.dataset.key, this.props.item);\n  },\n  onClickRow: function (e) {\n    this.props.onClickRow(e, this.props.item);\n  }\n});\nmodule.exports = JsonTable;","map":null,"metadata":{},"sourceType":"script"}