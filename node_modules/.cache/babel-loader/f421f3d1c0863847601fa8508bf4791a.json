{"ast":null,"code":"var _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Pages\\\\AddJob.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { withRouter } from \"react-router\";\nimport jobService from '../Services/jobService';\nimport Select from './Select';\nimport PropTypes from 'prop-types';\nimport '../Menu.css';\nimport '../index.css';\nconst propTypes = {\n  location: PropTypes.object.isRequired\n};\n\nclass AddJob extends React.Component {\n  constructor(props) {\n    super(props);\n    this.test = React.createRef();\n    this.params = {};\n    this.state = {\n      user: {},\n      customer_name: '',\n      numBoxes: '',\n      jobLocation: 'Loading Dock',\n      jobDispatch: 'Archive',\n      submitted: false,\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      submitted: true\n    });\n    const _this$state = this.state,\n          customer_id = _this$state.customer_id,\n          numBoxes = _this$state.numBoxes,\n          jobLocation = _this$state.jobLocation,\n          jobDispatch = _this$state.jobDispatch,\n          returnUrl = _this$state.returnUrl;\n    alert(this.test.current); // stop here if form is invalid\n\n    if (!numBoxes) {\n      return;\n    }\n\n    this.setState({\n      loading: true\n    });\n    this.addJob(this.props.match.params.id, numBoxes, jobLocation, jobDispatch).then(response => {\n      this.setState({\n        loading: false\n      });\n    }, error => this.setState({\n      error,\n      loading: false\n    }));\n    var path = \"/customer/\" + this.props.match.params.id;\n    this.props.history.push(path);\n  }\n\n  render() {\n    var path = \"/customer/\" + this.props.match.params.id;\n    const _this$state2 = this.state,\n          user = _this$state2.user,\n          customerID = _this$state2.customerID,\n          numBoxes = _this$state2.numBoxes,\n          jobLocation = _this$state2.jobLocation,\n          otherLocation = _this$state2.otherLocation,\n          submitted = _this$state2.submitted,\n          loading = _this$state2.loading;\n    return React.createElement(\"div\", {\n      className: \"Menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"Menu-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Box Tracker\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, localStorage.getItem('customer_name')), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Add New Job\")), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Select, {\n      handleSubmit: this.handleSubmit,\n      ref: this.test,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n  addJob(customer_id, job_numboxes, job_location, job_dispatch) {\n    var path = \"http://localhost:52773/BoxTracker/jobs\";\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      },\n      body: JSON.stringify({\n        'customer_id': customer_id,\n        'job_numboxes': job_numboxes,\n        'job_location': job_location,\n        'operator_id': localStorage.getItem(\"operator_id\"),\n        'job_dispatch': job_dispatch\n      })\n    };\n    return fetch(path, requestOptions).then(this.handleResponse).then(response => {\n      if (response) {\n        alert(\"Job Successfully Created\");\n      }\n\n      return response;\n    });\n  }\n\n}\n\nexport default AddJob;","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Pages\\AddJob.jsx"],"names":["React","ReactDOM","withRouter","jobService","Select","PropTypes","propTypes","location","object","isRequired","AddJob","Component","constructor","props","test","createRef","params","state","user","customer_name","numBoxes","jobLocation","jobDispatch","submitted","loading","handleChange","bind","handleSubmit","e","target","name","value","setState","preventDefault","customer_id","returnUrl","alert","current","addJob","match","id","then","response","error","path","history","push","render","customerID","otherLocation","localStorage","getItem","job_numboxes","job_location","job_dispatch","requestOptions","method","headers","body","JSON","stringify","fetch","handleResponse"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { withRouter } from \"react-router\";\r\nimport jobService from '../Services/jobService';\r\nimport Select from './Select';\r\nimport PropTypes from 'prop-types';\r\nimport '../Menu.css';\r\nimport '../index.css'\r\n\r\nconst propTypes ={\r\n  location: PropTypes.object.isRequired\r\n}\r\nclass AddJob extends React.Component{\r\n \r\n  constructor(props)\r\n  {\r\n      super(props);\r\n      this.test = React.createRef();\r\n      this.params = {};\r\n      this.state = {\r\n          \r\n          user: {},\r\n          customer_name: '',\r\n          numBoxes:'',\r\n          jobLocation:'Loading Dock',\r\n          jobDispatch:'Archive',\r\n          submitted: false,\r\n          loading: false\r\n      };\r\n    \r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n    handleChange(e) \r\n    {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    handleSubmit(e)\r\n    {\r\n        e.preventDefault();\r\n        this.setState({ submitted: true });\r\n        const { customer_id, numBoxes, jobLocation, jobDispatch, returnUrl } = this.state;\r\n        alert(this.test.current)\r\n        // stop here if form is invalid\r\n        if (!(numBoxes))\r\n        {\r\n            \r\n            return;\r\n        }\r\n        this.setState({ loading: true });\r\n        \r\n        this.addJob(this.props.match.params.id, numBoxes, jobLocation, jobDispatch)\r\n        .then(\r\n            response => {\r\n                this.setState({loading: false});\r\n            },\r\n            error => this.setState({ error, loading: false })\r\n        );\r\n        var path = \"/customer/\"+this.props.match.params.id\r\n        this.props.history.push(path);\r\n    }\r\n\r\n  render(){\r\n    var path = \"/customer/\"+this.props.match.params.id\r\n    const { user, customerID, numBoxes, jobLocation, otherLocation, submitted, loading } = this.state;\r\n    return (\r\n        \r\n        <div className=\"Menu\">\r\n          <header className=\"Menu-header\">\r\n            <h1>Box Tracker</h1>\r\n            <h2>{localStorage.getItem('customer_name') }\r\n            </h2>\r\n            <p>Add New Job</p>\r\n          </header>\r\n          <div className=\"content\">\r\n          <Select handleSubmit={this.handleSubmit} ref={this.test}/>\r\n          </div>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n\r\n    addJob(customer_id, job_numboxes, job_location, job_dispatch)\r\n    {\r\n      var path = \"http://localhost:52773/BoxTracker/jobs\"\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n                },\r\n            body: JSON.stringify({'customer_id': customer_id, 'job_numboxes': job_numboxes, 'job_location': job_location, 'operator_id':localStorage.getItem(\"operator_id\"), 'job_dispatch': job_dispatch})\r\n            };\r\n        return fetch(path, requestOptions)\r\n        .then(this.handleResponse).then(response => {\r\n                if(response)\r\n                {   \r\n                    alert(\"Job Successfully Created\")\r\n                }\r\n                return response;\r\n            }\r\n        )\r\n            \r\n    }\r\n  }\r\n  \r\n\r\nexport default AddJob;\r\n"]},"metadata":{},"sourceType":"module"}