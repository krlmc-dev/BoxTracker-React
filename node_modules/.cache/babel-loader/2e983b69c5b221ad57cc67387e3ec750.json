{"ast":null,"code":"export const userService = {\n  login,\n  logout\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Basic U3VwZXJVc2VyOlBBU1M=',\n      'accept': 'application/json'\n    }\n  };\n  return fetch(\"http://localhost:52773/csp/BoxTracker/login\", requestOptions).then(handleResponse).then(user => {\n    alert(\"test\"); // login successful if there's a user in the response\n\n    if (user) {\n      // store user details and basic auth credentials in local storage \n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('user', JSON.stringify(user));\n      alert(\"Logged In!\");\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!!response.ok) {\n      alert(\"test\");\n    }\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        Location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\userService.js"],"names":["userService","login","logout","username","password","requestOptions","method","headers","fetch","then","handleResponse","user","alert","authdata","window","btoa","localStorage","setItem","JSON","stringify","removeItem","response","text","data","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA;AAFuB,CAApB;;AAKP,SAASD,KAAT,CAAeE,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,QAAMC,cAAc,GAAG;AAEnBC,IAAAA,MAAM,EAAE,KAFW;AAGnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAgB,4BAFX;AAGL,gBAAS;AAHJ;AAHU,GAAvB;AASA,SAAOC,KAAK,gDAAgDH,cAAhD,CAAL,CACFI,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACVC,IAAAA,KAAK,CAAC,MAAD,CAAL,CADU,CAEV;;AACA,QAAID,IAAJ,EAAU;AAEN;AACA;AACAA,MAAAA,IAAI,CAACE,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYZ,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAA7B;AACAC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAED,WAAOD,IAAP;AACH,GAfE,CAAP;AAgBH;;AAED,SAAST,MAAT,GAAkB;AACd;AACAc,EAAAA,YAAY,CAACI,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASV,cAAT,CAAwBW,QAAxB,EAAkC;AAE9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBb,IAAhB,CAAqBa,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIJ,IAAI,CAACM,KAAL,CAAWF,IAAX,CAArB;;AAEA,QAAI,CAAC,CAACD,QAAQ,CAACI,EAAf,EAAkB;AACdb,MAAAA,KAAK,CAAC,MAAD,CAAL;AACH;;AACD,QAAI,CAACS,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAxB,QAAAA,MAAM;AACNyB,QAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AAED,YAAMC,KAAK,GAAIN,IAAI,IAAIA,IAAI,CAACO,OAAd,IAA0BT,QAAQ,CAACU,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAON,IAAP;AACH,GAlBM,CAAP;AAmBH;;AACD,eAAevB,WAAf","sourcesContent":["export const userService = {\r\n    login,\r\n    logout\r\n};\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        \r\n        method: 'GET',\r\n        headers: { \r\n            'Content-Type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=', \r\n            'accept':'application/json'\r\n            }\r\n        };\r\n    return fetch(`http://localhost:52773/csp/BoxTracker/login`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            alert(\"test\")\r\n            // login successful if there's a user in the response\r\n            if (user) {\r\n                \r\n                // store user details and basic auth credentials in local storage \r\n                // to keep user logged in between page refreshes\r\n                user.authdata = window.btoa(username + ':' + password);\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n                alert(\"Logged In!\")\r\n            }\r\n\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    \r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n\r\n        if (!!response.ok){\r\n            alert(\"test\")\r\n        }\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                Location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}\r\nexport default userService;\r\n"]},"metadata":{},"sourceType":"module"}