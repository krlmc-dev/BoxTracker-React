{"ast":null,"code":"var _jsxFileName = \"C:\\\\BoxTracker-React\\\\src\\\\Components\\\\Charts\\\\BoxLocationsChart.jsx\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\n\nclass ChartsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataBar: {\n        labels: [\"Preparation\", \"Scanning\", \"Quality Control\", \"Dispatch\"],\n        datasets: [{\n          label: \"No. Of Boxes\",\n          data: this.stats.steps,\n          backgroundColor: [\"rgba(113, 205, 205,0.4)\", \"rgba(98,  182, 239,0.4)\", \"rgba(255, 177, 101,0.4)\", \"rgba(255, 134,159,0.4)\"],\n          borderWidth: 2,\n          borderColor: [\"rgba(113, 205, 205, 1)\", \"rgba(98,  182, 239, 1)\", \"rgba(255, 177, 101, 1)\", \"rgba(255, 134, 159, 1)\"]\n        }]\n      },\n      barChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            barPercentage: 1,\n            gridLines: {\n              display: true,\n              color: \"rgba(0, 0, 0, 0.1)\"\n            }\n          }],\n          yAxes: [{\n            gridLines: {\n              display: true,\n              color: \"rgba(0, 0, 0, 0.1)\"\n            },\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    };\n    this.params = {};\n    this.state = {\n      stats: []\n    };\n  }\n\n  getLocations() {\n    {\n      this.stats.map((data, i) => {\n        alert(data.LocNums);\n        return [];\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(MDBContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Number of Boxes Per Location\"), React.createElement(Bar, {\n      data: this.state.dataBar,\n      options: this.state.barChartOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  }\n\n  getBoxLocations() {\n    var path = \"http://localhost:52773/BoxTracker/stats\";\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n      }\n    };\n    return fetch(path, requestOptions).then(this.handleGetResponse).then(response => {\n      if (response) {\n        this.setState({\n          stats: response\n        });\n      }\n\n      return response;\n    });\n  }\n\n  handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          alert(\"not OK, 401\"); // auto logout if 401 response returned from api\n\n          Location.reload(true);\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n  handleGetResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n\n}\n\nexport default ChartsPage;","map":{"version":3,"sources":["C:\\BoxTracker-React\\src\\Components\\Charts\\BoxLocationsChart.jsx"],"names":["React","Bar","MDBContainer","ChartsPage","Component","constructor","props","state","dataBar","labels","datasets","label","data","stats","steps","backgroundColor","borderWidth","borderColor","barChartOptions","responsive","maintainAspectRatio","scales","xAxes","barPercentage","gridLines","display","color","yAxes","ticks","beginAtZero","params","getLocations","map","i","alert","LocNums","render","getBoxLocations","path","requestOptions","method","headers","fetch","then","handleGetResponse","response","setState","handleResponse","text","JSON","parse","ok","status","Location","reload","error","message","statusText","Promise","reject"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,UAA7B;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAenBC,KAfmB,GAeX;AACJC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,CAAC,aAAD,EAAgB,UAAhB,EAA4B,iBAA5B,EAA+C,UAA/C,CADH;AAELC,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,KAAK,EAAE,cADX;AAEIC,UAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,KAFrB;AAGIC,UAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,wBAJa,CAHrB;AAUIC,UAAAA,WAAW,EAAE,CAVjB;AAWIC,UAAAA,WAAW,EAAE,CACT,wBADS,EAET,wBAFS,EAGT,wBAHS,EAIT,wBAJS;AAXjB,SADM;AAFL,OADL;AAyBJC,MAAAA,eAAe,EAAE;AACbC,QAAAA,UAAU,EAAE,IADC;AAEbC,QAAAA,mBAAmB,EAAE,KAFR;AAGbC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CACH;AACIC,YAAAA,aAAa,EAAE,CADnB;AAEIC,YAAAA,SAAS,EAAE;AACPC,cAAAA,OAAO,EAAE,IADF;AAEPC,cAAAA,KAAK,EAAE;AAFA;AAFf,WADG,CADH;AAUJC,UAAAA,KAAK,EAAE,CACH;AACIH,YAAAA,SAAS,EAAE;AACPC,cAAAA,OAAO,EAAE,IADF;AAEPC,cAAAA,KAAK,EAAE;AAFA,aADf;AAKIE,YAAAA,KAAK,EAAE;AACHC,cAAAA,WAAW,EAAE;AADV;AALX,WADG;AAVH;AAHK;AAzBb,KAfW;AAEf,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKvB,KAAL,GAAa;AACTM,MAAAA,KAAK,EAAE;AADE,KAAb;AAIH;;AACDkB,EAAAA,YAAY,GACZ;AACI;AAAC,WAAKlB,KAAL,CAAWmB,GAAX,CAAe,CAACpB,IAAD,EAAOqB,CAAP,KAAa;AACzBC,QAAAA,KAAK,CAACtB,IAAI,CAACuB,OAAN,CAAL;AACA,eAAO,EAAP;AACC,OAHJ;AAGM;AACV;;AAuDDC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,EAEI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWC,OAAtB;AAA+B,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWW,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AAEDmB,EAAAA,eAAe,GAAG;AACd,QAAIC,IAAI,GAAG,yCAAX;AACA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAiB;AAFZ;AAFU,KAAvB;AAOA,WAAOC,KAAK,CAACJ,IAAD,EAAOC,cAAP,CAAL,CACFI,IADE,CACG,KAAKC,iBADR,EAEFD,IAFE,CAEGE,QAAQ,IAAI;AACd,UAAIA,QAAJ,EAAc;AACV,aAAKC,QAAL,CAAc;AACVjC,UAAAA,KAAK,EAAEgC;AADG,SAAd;AAGH;;AACD,aAAOA,QAAP;AACH,KATE,CAAP;AAUH;;AAEDE,EAAAA,cAAc,CAACF,QAAD,EAAW;AAErB,WAAOA,QAAQ,CAACG,IAAT,GAAgBL,IAAhB,CAAqBK,IAAI,IAAI;AAChC,YAAMpC,IAAI,GAAGoC,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAArB;;AACA,UAAI,CAACH,QAAQ,CAACM,EAAd,EAAkB;AACd,YAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AACzBlB,UAAAA,KAAK,CAAC,aAAD,CAAL,CADyB,CAEzB;;AACAmB,UAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AAED,cAAMC,KAAK,GAAI3C,IAAI,IAAIA,IAAI,CAAC4C,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,aAAO3C,IAAP;AACH,KAbM,CAAP;AAcH;;AAEDgC,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AAExB,WAAOA,QAAQ,CAACG,IAAT,GAAgBL,IAAhB,CAAqBK,IAAI,IAAI;AAChC,YAAMpC,IAAI,GAAGoC,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAArB;;AACA,UAAI,CAACH,QAAQ,CAACM,EAAd,EAAkB;AACd,cAAMI,KAAK,GAAI3C,IAAI,IAAIA,IAAI,CAAC4C,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,aAAO3C,IAAP;AACH,KAPM,CAAP;AAQH;;AAhIoC;;AAmIzC,eAAeT,UAAf","sourcesContent":["import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\nclass ChartsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.params = {};\r\n        this.state = {\r\n            stats: [],\r\n        };\r\n\r\n    }\r\n    getLocations()\r\n    {\r\n        {this.stats.map((data, i) => {\r\n            alert(data.LocNums)\r\n            return []\r\n            })}\r\n    }\r\n    state = {\r\n        dataBar: {\r\n            labels: [\"Preparation\", \"Scanning\", \"Quality Control\", \"Dispatch\"],\r\n            datasets: [\r\n                {\r\n                    label: \"No. Of Boxes\",\r\n                    data: this.stats.steps,\r\n                    backgroundColor: [\r\n                        \"rgba(113, 205, 205,0.4)\",\r\n                        \"rgba(98,  182, 239,0.4)\",\r\n                        \"rgba(255, 177, 101,0.4)\",\r\n                        \"rgba(255, 134,159,0.4)\"\r\n\r\n                    ],\r\n                    borderWidth: 2,\r\n                    borderColor: [\r\n                        \"rgba(113, 205, 205, 1)\",\r\n                        \"rgba(98,  182, 239, 1)\",\r\n                        \"rgba(255, 177, 101, 1)\",\r\n                        \"rgba(255, 134, 159, 1)\"\r\n\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        barChartOptions: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n                xAxes: [\r\n                    {\r\n                        barPercentage: 1,\r\n                        gridLines: {\r\n                            display: true,\r\n                            color: \"rgba(0, 0, 0, 0.1)\"\r\n                        }\r\n                    }\r\n                ],\r\n                yAxes: [\r\n                    {\r\n                        gridLines: {\r\n                            display: true,\r\n                            color: \"rgba(0, 0, 0, 0.1)\"\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <MDBContainer>\r\n                <h3 className=\"mt-5\">Number of Boxes Per Location</h3>\r\n                <Bar data={this.state.dataBar} options={this.state.barChartOptions} />\r\n            </MDBContainer>\r\n        );\r\n    }\r\n\r\n    getBoxLocations() {\r\n        var path = \"http://localhost:52773/BoxTracker/stats\"\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': 'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            }\r\n        };\r\n        return fetch(path, requestOptions)\r\n            .then(this.handleGetResponse)\r\n            .then(response => {\r\n                if (response) {\r\n                    this.setState({\r\n                        stats: response\r\n                    })\r\n                }\r\n                return response;\r\n            });\r\n    }\r\n\r\n    handleResponse(response) {\r\n\r\n        return response.text().then(text => {\r\n            const data = text && JSON.parse(text);\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    alert(\"not OK, 401\")\r\n                    // auto logout if 401 response returned from api\r\n                    Location.reload(true);\r\n                }\r\n\r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n            return data;\r\n        });\r\n    }\r\n\r\n    handleGetResponse(response) {\r\n\r\n        return response.text().then(text => {\r\n            const data = text && JSON.parse(text);\r\n            if (!response.ok) {\r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n            return data;\r\n        });\r\n    }\r\n}\r\n\r\nexport default ChartsPage;"]},"metadata":{},"sourceType":"module"}