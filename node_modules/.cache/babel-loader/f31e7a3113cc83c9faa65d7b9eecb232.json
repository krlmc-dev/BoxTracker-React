{"ast":null,"code":"export const userService = {\n  login,\n  logout\n};\n\nfunction login(username, password) {\n  //alert(\"Start login method\")\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n      'authorization': 'Basic U3VwZXJVc2VyOlBBU1M='\n    },\n    body: JSON.stringify({\n      \"username\": username,\n      \"password\": password\n    })\n  };\n  return fetch(\"http://localhost:52773/csp/BoxTracker/login\", requestOptions).then(handleResponse).then(user => {\n    // login successful if there's a user in the response\n    if (user) {\n      alert(JSON.stringify(user)); // store user details and basic auth credentials in local storage \n      // to keep user logged in between page refreshes\n\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('user', JSON.stringify(user)); //alert(\"Logged In!\")\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction handleResponse(response) {\n  alert(\"Response\");\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      //alert(\"test\")\n      if (response.status === 401) {\n        //alert(\"not OK, 401\")\n        // auto logout if 401 response returned from api\n        logout();\n        this.props.history.push('/login');\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["C:\\BoxTracker\\boxtrackerwebbapp\\src\\Services\\userService.js"],"names":["userService","login","logout","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","alert","authdata","window","btoa","localStorage","setItem","removeItem","response","text","data","parse","ok","status","props","history","push","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA;AAFuB,CAApB;;AAKP,SAASD,KAAT,CAAeE,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B;AAEA,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAgB;AAFX,KAFU;AAMnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,kBAAWP,QAAZ;AAAsB,kBAAWC;AAAjC,KAAf;AANa,GAAvB;AAQA,SAAOO,KAAK,CAAC,6CAAD,EAAgDN,cAAhD,CAAL,CACFO,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACA,QAAIA,IAAJ,EAAU;AACNC,MAAAA,KAAK,CAACN,IAAI,CAACC,SAAL,CAAeI,IAAf,CAAD,CAAL,CADM,CAEN;AACA;;AACAA,MAAAA,IAAI,CAACE,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYf,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAe,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BX,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B,EALM,CAMN;AACH;;AAED,WAAOA,IAAP;AACH,GAdE,CAAP;AAeH;;AAED,SAASZ,MAAT,GAAkB;AACd;AACAiB,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASR,cAAT,CAAwBS,QAAxB,EAAkC;AAC9BP,EAAAA,KAAK,CAAC,UAAD,CAAL;AACA,SAAOO,QAAQ,CAACC,IAAT,GAAgBX,IAAhB,CAAqBW,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAId,IAAI,CAACgB,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd;AACA,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACA;AACAzB,QAAAA,MAAM;AACN,aAAK0B,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;;AAED,YAAMC,KAAK,GAAIP,IAAI,IAAIA,IAAI,CAACQ,OAAd,IAA0BV,QAAQ,CAACW,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AACD,WAAOP,IAAP;AACH,GAfM,CAAP;AAgBH;;AACD,eAAexB,WAAf","sourcesContent":["export const userService = {\r\n    login,\r\n    logout\r\n};\r\n\r\nfunction login(username, password) {\r\n    //alert(\"Start login method\")\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'authorization':'Basic U3VwZXJVc2VyOlBBU1M=',\r\n            },\r\n        body: JSON.stringify({\"username\":username, \"password\":password})\r\n        };\r\n    return fetch(\"http://localhost:52773/csp/BoxTracker/login\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // login successful if there's a user in the response\r\n            if (user) {\r\n                alert(JSON.stringify(user))\r\n                // store user details and basic auth credentials in local storage \r\n                // to keep user logged in between page refreshes\r\n                user.authdata = window.btoa(username + ':' + password);\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n                //alert(\"Logged In!\")\r\n            }\r\n\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    alert(\"Response\")\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            //alert(\"test\")\r\n            if (response.status === 401) {\r\n                //alert(\"not OK, 401\")\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                this.props.history.push('/login');\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\nexport default userService;\r\n"]},"metadata":{},"sourceType":"module"}