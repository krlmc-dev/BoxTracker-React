import React, { Component } from 'react';
import PropTypes from 'prop-types';

import ScrollListItem from './ScrollListItem';

class ScrollList extends Component {
  static propTypes = {
    defaultItemHeight: PropTypes.number,
    viewportHeight: PropTypes.number.isRequired,
    scrollTop: PropTypes.number,
    items: PropTypes.array.isRequired
  };

  static defaultProps = {
    scrollTop: 0,
    defaultItemHeight: 30
  };

  state = {
    itemsHeight: [],
    itemsTop: [],
    scrollTop: this.props.scrollTop
  };

  componentDidMount() {
    this.element.scrollTop = this.state.scrollTop;

    this.element.addEventListener('scroll', this.handleScroll, false);
  }

  componentWillUnmount() {
    this.element.removeEventListener('scroll', this.handleScroll, false);
  }

  handleScroll = e => {
    this.setState({ scrollTop: e.target.scrollTop });
  };

  handleItemRectChange = (index, rect) => {
    const { items, defaultItemHeight } = this.props;
    const { itemsHeight } = this.state;
    let top = 0;

    itemsHeight[index] = rect.height;

    const itemsTop = items.map((item, index) => {
      const retTop = top;

      top += itemsHeight[index] || defaultItemHeight;

      return retTop;
    });

    this.setState({ itemsHeight, itemsTop });
  };

  renderItem(item, index) {
    const { defaultItemHeight, items, children } = this.props;
    const { itemsHeight, itemsTop } = this.state;
    const style = {
      position: 'absolute',
      left: '0',
      height: `${defaultItemHeight}px`
    };

    if (itemsHeight[index]) {
      style.height = `${itemsHeight[index]}px`;
    }

    if (typeof itemsTop[index] !== 'undefined') {
      style.top = `${itemsTop[index]}px`;
    }

    return (
      <div
        style={style}
        key={`item${index}-${itemsTop[index]}-${itemsHeight[index]}`}
      >
        <ScrollListItem index={index} onRectChange={this.handleItemRectChange}>
          {children(items[index])}
        </ScrollListItem>
      </div>
    );
  }

  renderItems() {
    const { defaultItemHeight, viewportHeight, items } = this.props;
    const { itemsHeight, scrollTop } = this.state;

    const { start, end, height } = items.reduce(
      function(acc, item, index) {
        const itemHeight = itemsHeight[index] || defaultItemHeight;

        acc.height += itemHeight;

        // start index
        if (acc.height >= scrollTop && typeof acc.start === 'undefined') {
          acc.start = Math.max(index - 5, 0);
        }

        // end index
        if (
          acc.height - scrollTop > viewportHeight &&
          typeof acc.end === 'undefined'
        ) {
          acc.end = Math.min(index + 5, items.length - 1);
        }

        return acc;
      },
      { height: 0 }
    );

    return (
      <div style={{ height: `${height}px`, position: 'relative' }}>
        {items.slice(start, end).map((item, index) => {
          return this.renderItem(item, index + start);
        })}
      </div>
    );
  }

  render() {
    const { viewportHeight } = this.props;
    const style = {
      height: `${viewportHeight}px`,
      overflow: 'scroll',
      zIndex: 100000
    };

    return (
      <div
        ref={element => {
          this.element = element;
        }}
        style={style}
      >
        {this.renderItems()}
      </div>
    );
  }
}

export default ScrollList;
